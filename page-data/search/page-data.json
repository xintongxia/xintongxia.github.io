{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Introduction react-map-gl is a suite of React components for\nMapbox GL JS. Mapbox GL JS is an awesome library for making modern web maps. It…","rawMarkdownBody":"# Introduction\n\nreact-map-gl is a suite of [React](http://facebook.github.io/react/) components for\n[Mapbox GL JS](https://github.com/mapbox/mapbox-gl-js).\n\nMapbox GL JS is an awesome library for making modern web maps. It is beautiful, efficient (WebGL-powered), and fully open source. You may load map data from Mapbox's own service, which is free until a certain level of traffic is exceeded; or you can create and host your own map data using one of the many [open source tools](https://github.com/mapbox/awesome-vector-tiles).\n\nNew to react-map-gl? [Get Started](/docs/get-started/get-started.md)\n\nWant to contribute? See our [Developer Guide](/docs/developer-guide.md)\n\n\n## Design Philosophy\n\nAt Uber, we make powerful web tools that contain maps. To manage the complexity of our applications, we fully embrace React and reactive programming.\n\nThe stock mapbox-gl APIs are [imperative](https://en.wikipedia.org/wiki/Imperative_programming). That is, you instruct the map to do something (for example, [map.flyTo](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto)), and it will execute the command at its own pace.\n\nThis does not scale when we have many components that need to synchronize with each other. One use case we have is to render two maps side by side, and when the user interacts with one, update both cameras. We draw UI on top of the map using React, pinned to a given geolocation. We also render visualization layers on top of the map using WebGL, most notably with [deck.gl](https://deck.gl). The mapbox maps, the deck.gl canvas, and React controls' render cycles are all asynchronous. If we listen to the [move](https://docs.mapbox.com/mapbox-gl-js/api/#map.event:move) event in the map and tell the other components to update, the other components would always be one frame behind.\n\nUltimately, in the spirit of the [reactive programming paradigm](https://en.wikipedia.org/wiki/Reactive_programming), data always flows **down**. In a complex application, any user input or data fetch can affect the rendering of many components. We might store the **source of truth** in a parent component state, or Redux store, or hooks, and let it propagate down to the map as well as its peers. As long as the map manages its own state, as mapbox-gl is designed to do, we risk the components going out of sync.\n\nreact-map-gl creates a fully reactive wrapper for mapbox-gl. The [InteractiveMap](/docs/api-reference/interactive-map) component is stateless. To move the map camera in anyway, the application must update the component's props. The application can also be confident that the map's camera would never deviate from the props that it's assigned. At first glance, its API may seem verbose to those who come from the imperative world of mapbox-gl. However, it is essential for the correctness of large applications.\n\n\n## Limitations\n\nThis library provides convenient wrappers around initializing and (to some degree) tracking the state of a Mapbox WebGL map. Because most of the functionality of Mapbox's JS API depends on the use of HTML5 canvases and WebGL, which React is not built to manipulate, the React component does not mirror all the functionality of Mapbox GL JS's Map class. You may access the native Mapbox API exposed by the [getMap()](/docs/api-reference/static-map.md#getmap) function in this library. However, proceed with caution as calling the native APIs may break the connection between the React layer props and the underlying map state.\n","slug":"docs","title":"Introduction"},{"excerpt":"Upgrade Guide Upgrading to v4  is removed, use  instead  is no longer a dependency Export  is removed, use  instead 's  prop is renamed to…","rawMarkdownBody":"# Upgrade Guide\n\n## Upgrading to v4\n\n- `onChangeViewport` is removed, use `onViewportChange` instead\n- `Immutable.js` is no longer a dependency\n- Export `experimental.MapControls` is removed, use `MapController` instead\n- `InteractiveMap`'s `mapControls` prop is renamed to `controller`\n- Removed support for the deprecated `interactive` property on the layer styles. Use the `interactiveLayerIds` prop to specify which layers are clickable.\n\n## Upgrading to v3.2\n\n- The latest mapbox-gl release requires stylesheet to be included at all times. See [Get Started](/docs/get-started/get-started.md) for information about styling.\n- Immutable.js is no longer a hard dependency and will be removed in the next major release. If you are importing immutable in your application, it is recommended that you explicitly list it in the application's dependencies.\n\n\n## Upgrading to v3\n\nv3 is a major upgrade of react-map-gl. While we have tried to gently deprecated any changed or removed features, a few breaking changes could not be avoided.\n\n\n### Version Requirements\n\n- The **Node Version Requirement** for **building** react-map-gl is now **>=v6.4.0**. Using prebuilt react-map-gl does **NOT** has this limitation. This is introduced by [Mapbox GL JS v0.38.0](https://github.com/mapbox/mapbox-gl-js/releases/tag/v0.38.0)\n\n\n### MapGL Component\n\n* **Two Map Components** - v3 now splits the Map component into two React components: `StaticMap` and `InteractiveMap`. `InteractiveMap` is the default export, and designed to be as compatible as possible with the v2 default component.\n\n\n#### `onChangeViewport` callback now includes `width` and `height`.\n\nThe `viewport` parameter passed to the `onChangeViewport` callback now includes `width` and `height`. Application code that composed the `viewport` with `width` and `height` may have to be updated. Please double check your render code if you relied on this behavior.\n```js\n// BAD: 'width' and 'height' below will be overridden by what's in the 'viewport' object\n<ReactMapGL width={500} height={400} {...viewport} />\n// GOOD: 'width' and 'height' below will override the values in 'viewport'\n<ReactMapGL {...viewport} width={500} height={400} />\n```\n\n### Overlays\n\n* **Some Overlays Moved to Examples** -  Some less frequently used overlays (`DraggablePointsOverlay`, `ChoroplethOverlay`, `ScatterplotOverlay`), have been moved to examples. Most users are now using mapbox styles or deck.gl layers and removing these overlays reduces the size of the react-map-gl library for the majority of users that don't need them. If you still use them, simply copy the overlay source file(s) into your application.\n* **Overlays must be Children of the Map** - Overlays **must** now be rendered as children of the main `react-map-gl` component to automatically sync with the map viewport.\n\n### `fitBounds` utility function\n\nThe `fitBounds` utility has been moved to the [viewport-mercator-project](https://github.com/uber-common/viewport-mercator-project) library. The function can now be called as follows:\n```js\nimport WebMercatorViewport from 'viewport-mercator-project';\nconst viewport = new WebMercatorViewport({width: 600, height: 400});\nconst bound = viewport.fitBounds(\n  [[-73.9876, 40.7661], [-72.9876, 41.7661]],\n  {padding: 20, offset: [0, -40]}\n);\n// => bounds: instance of WebMercatorViewport\n// {longitude: -73.48760000000007, latitude: 41.268014439447484, zoom: 7.209231188444142}\n```\n\n### Deprecations\n\nWe have started to deprecate a few React props. In all the cases below, the old `props` will still work (you'll get a warning in the console), but they will likely be removed in the next major version of react-map-gl so you should start using the new `props` as soon as possible.\n\n| Old Prop                        | New Prop |\n| ---                             | --- |\n| `onChangeViewport(<viewport>)`  | `onViewportChange(<viewport>)` |\n| `onHoverFeatures(<features>)`   | `onHover(<event>)` |\n| `onClickFeatures(<features>)`   | `onClick(<event>)` |\n| `perspectiveEnabled [default: false]` | `dragRotate [default: true]`  |\n\n\n\n## Upgrading to v2\n\nv2 is API compatible with v1, however if you are still using `v1` of react-map-gl, make sure that you first upgrade:\n* Your `node` version to `v4` or higher\n* Your `react` version to `15.4` or higher.\n\nBackground: `mapbox-gl` 0.31.0 introduced a hard dependency on Node >= v4.\n\n\n## Upgrading to v1\n\n(Upgrading from 0.6.x)\n\n* **Importing Overlays** - The map overlay components (`HTMLOverlay`, `CanvasOverlay`, `SVGOverlay` etc) are now named exports. They previously had to be imported via their relative source paths:\n\n```js\n// v1.0\nimport MapGL, {SVGOverlay} from 'react-map-gl';\n\n// v0.6\nimport MapGL from 'react-map-gl';\nimport SVGOverlay from 'react-map-gl/src/api-reference/svg-overlay';.\n```\n\n* **Map State** - The map state reported by `onViewportChanged` will now contain additional state fields (tracking not only `pitch` and `bearing` needed for perspective mode, but also transient information about how the projection is being changed by the user).\n    * This information must be passed back to the react-map-gl component in the next render.\n    * To simplify and future proof applications, it is recommended to simply save the entire `mapState` in your app store whenever it changes and then pass it back to the component rather than trying to keep track of individual fields (like `longitude`, `latitude` and `zoom`).\n","slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"Developer Guide Develop The dev tools are tested with Node 8.11.3 and yarn 1.7.0. Set up locally: Test: Test in Node: Test in browser (can…","rawMarkdownBody":"# Developer Guide\n\n## Develop\n\nThe dev tools are tested with Node 8.11.3 and yarn 1.7.0.\n\nSet up locally:\n\n```bash\n$ git clone https://github.com/visgl/react-map-gl.git\n$ cd react-map-gl\n$ yarn bootstrap\n$ npm run start\n```\n\nTest:\n\n```bash\n$ npm run test\n```\n\nTest in Node:\n\n```bash\n$ npm run test node\n```\n\nTest in browser (can use Chrome dev tools for debugging):\n\n```bash\n$ npm run test browser\n```\n\n## Pull Requests\n\nAny intended change to the code base must open a [pull request](https://help.github.com/articles/creating-a-pull-request/) and be approved. \n\nGenerally speaking, all PRs are open against the `master` branch, unless the feature being affected no longer exists on master.\n\n### PR Checklist\n\n- [ ] Tests\n  + `npm run test` must be successful.\n  + New code should be covered by unit tests whenever possible.\n- [ ] Documentation\n  + If public APIs are added/modified, update component documentation in `docs/api-reference`.\n  + Breaking changes and deprecations must be added to `docs/upgrade-guide.md`.\n  + Noteworthy new features should be added to `docs/whats-new.md`.\n- [ ] Description on GitHub\n  + Link to relevant issue.\n  + Label with a milestone (latest release or vNext).\n  + If public APIs are added/modified, describe the intended behavior.\n  + If visual/interaction is affected, consider attaching a screenshot/GIF.\n\n\n## Branching and Releasing Model\n\nThe `master` branch of the repo is the latest dev branch. It is used to publish the latest **beta** release, e.g. `4.0.0-alpha.1`.\n\nEach minor release branches off from master, e.g. `2.0-release`, `3.3-release`. All **production** releases are built and published from respective release branches.\n\n[Website](https://uber.github.io/react-map-gl) is built from the `<latest>-release` branch.\n\n[Documentation](https://uber.github.io/react-map-gl/#/Documentation) is served directly from the `<latest>-release` branch.\n\nOnly the `master` branch and the `<latest>-release` branch are actively maintained.\n\n### New Release Branch Checklist\n\n> NOTE: for authorized team members only\n\n- [ ] Push to new `<latest>-release` branch. `<latest>` represents a minor release number, e.g. `3.3`, `4.0`.\n- [ ] Run `npm run update-release-branch <latest>` to upate the dependencies of examples to the latest version, and the links in all documentation to point to the new branch\n- [ ] Publish new minor release\n- [ ] Publish website\n\n\n## Publish\n\n> NOTE: for authorized team members only\n\n### Production Release\n\n1. Log into an authorized [npmjs.com](https://www.npmjs.com/) account. You can use [npmrc](https://www.npmjs.com/package/npmrc) to manage multiple npm profiles.\n2. Make sure both the `master` and the release branch are up to date:\n\n    ```bash\n    $ git checkout master\n    $ git pull\n    $ git checkout 3.3-release\n    $ git pull\n    ```\n\n3. Find the last release commit on the `<latest>-release` branch:\n\n    ```bash\n    $ git log\n\n    ...\n\n    commit a05d23059444cf29bb4e38ea5e4cd6172a4f463d\n    Author: Xiaoji Chen <xiaoji@uber.com>\n    Date:   Fri Aug 3 10:11:45 2018 -0700\n\n        3.3.3\n    ```\n\n    Find the commits on `master` after this commit:\n\n    ```bash\n    $ git log master --since=\"`git show -s --format=%ci a05d2305`\"\n    ```\n\n4. Find out which new commits should be cherry-picked into the release branch.\n\n    If a commit is a bug fix for the current production release, or a minor, non-breaking new feature, it can be published as a patch. When in doubt, check the original PR's milestone label on GitHub. For example [#565](https://github.com/visgl/react-map-gl/pull/565):\n\n    ```bash\n    $ git cherry-pick 1238140a\n    ```\n\n    If the commit affects code that is published to npm, add its commit message to CHANGELOG.md:\n\n    ```\n    ## 3.3.4 (Aug 4, 2018)\n\n    - fix capture* props for overlay components (#565)\n    ```\n\n  Examples of changes that are published:\n\n    - A change anywhere in `src`\n    - A change in Babel config\n    - A change in `README.md`\n    - A change in `package.json`'s user-facing fields, e.g. `file`, `main`, `browser`, `dependencies`, `peerDependencies`\n\n  Examples of changes that are not published:\n\n    - A change in `docs`\n    - Improvement of an example\n    - Adding a new lint rule\n    - Adding a new npm script\n\n5. Include the changelog in the version commit, and publish:\n\n    ```bash\n    $ git add .\n    # This will bump version to the next patch release, commit, tag and publish:\n    $ npm run publish-prod\n    ```\n\n6. If the new patch release fixes a bug on the website, republish the website.\n\n\n### Beta Release\n\n1. Log into an authorized [npmjs.com](https://www.npmjs.com/) account. You can use [npmrc](https://www.npmjs.com/package/npmrc) to manage multiple npm profiles.\n2. Make sure the `master` branch is up to daate:\n\n    ```bash\n    $ git checkout master\n    $ git pull\n    ```\n\n3. Find the last release commit on the `master` branch:\n\n    ```bash\n    $ git log\n\n    ...\n    commit a05d23059444cf29bb4e38ea5e4cd6172a4f463d\n    Author: Xiaoji Chen <xiaoji@uber.com>\n    Date:   Fri Aug 3 10:11:45 2018 -0700\n\n        4.0.0-alpha.1\n    ```\n\n    Find the commits on `master` after this commit:\n\n    ```bash\n    $ git log --since=\"`git show -s --format=%ci a05d2305`\"\n    ```\n\n4. If a commit affects code that is published to npm, add its commit message to CHANGELOG.md.\n\n5. If some beta version has been published for the target release (e.g. `4.0.0-alpha.1`), do not make changes to `package.json`. Otherwise, manually bump the version in `package.json` to the appropriate pre-release version (e.g. `4.1.0-alpha.0`).\n\n6. Include the changelog in the version commit, and publish:\n\n    ```bash\n    $ git add .\n    # This will bump version to the next pre-release, commit, tag and publish:\n    $ npm run publish-beta\n    ```\n\n### Website\n\n1. Make sure the `<latest>-release` branch is up to date:\n\n    ```bash\n    $ git checkout 3.3-release\n    $ git pull\n    ```\n\n2. Make sure you have the correct Mapbox token:\n\n    ```bash\n    $ echo $MapboxAccessToken\n    ```\n\n3. Test the website:\n\n    ```bash\n    $ cd website\n    $ yarn\n    $ yarn start\n    ```\n\n4. Build and publish the website:\n\n    ```bash\n    $ yarn build\n    $ git checkout gh-pages\n    ```\n\n    Copy the content from `website/dist` to the root of the project. Commit with the corresponding release version:\n\n    ```bash\n    $ git add .\n    $ git commit -m \"3.3.4\"\n    $ git push\n    ```\n","slug":"docs/developer-guide","title":"Developer Guide"},{"excerpt":"Adding Custom Data Native Mapbox Layers You can inject data and mapbox native layers by modifying the map style object: For details about…","rawMarkdownBody":"# Adding Custom Data\n\n## Native Mapbox Layers\n\nYou can inject data and mapbox native layers by modifying the map style object:\n\n```js\nimport {fromJS} from 'immutable';\nconst mapStyle = fromJS({\n    version: 8,\n    sources: {\n        points: {\n            type: 'geojson',\n            data: {\n                type: 'FeatureCollection',\n                features: [\n                    {type: 'Feature', geometry: {type: 'Point', coordinates: [-122.45, 37.78]}}\n                ]\n            }\n        }\n    },\n    layers: [\n        {\n            id: 'my-layer',\n            type: 'circle',\n            source: 'points',\n            paint: {\n                'circle-color': '#f00',\n                'circle-radius': 4\n            }\n        }\n    ]\n});\n\n<ReactMapGL mapStyle={mapStyle} ... />\n\n```\n\nFor details about data sources and layer configuration, check out the [Mapbox style specification](https://www.mapbox.com/mapbox-gl-js/style-spec).\n\nFor dynamically updating data and layers, check out the [GeoJSON](http://uber.github.io/react-map-gl/examples/geojson) and [GeoJSON animation](http://uber.github.io/react-map-gl/examples/geojson-animation) examples.\n\n\n## Overlays\n\nreact-map-gl provides a basic overlay API that enables applications to overlay data on top of maps.\n\nNote that the built-in overlays are intended to provide basic functionality only. For more feature rich and performant data visualization overlay use cases, consider using [deck.gl](https://uber.github.io/deck.gl).\n\n\n### Example\n\n```js\nimport {SVGOverlay} from 'react-map-gl';\n\nfunction redraw({project}) {\n  const [cx, cy] = project([-122, 37]);\n  return <circle cx={cx} cy={cy} r={4} fill=\"blue\" />;\n}\n\n<MapGL {...viewport}>\n  <SVGOverlay redraw={redraw} />\n</MapGL>\n```\n\n\n### Built-in Overlays\n\nBuilt-in overlays are: `SVGOverlay`, `HTMLOverlay`, and `CanvasOverlay`. They are imported using\n```\nimport {SVGOverlay, HTMLOverlay, CanvasOverlay} from 'react-map-gl';\n```\n\n### Example Overlays\n\nThere are a couple of [additional overlays](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/additional-overlays) in the examples folder that can be copied into applications `ScatterplotOverlay`, `DraggablePointsOverlay`, `ChoroplethOverlay`.\n\n\n### Third-party Overlays\n\nThird party overlays can also be created. For example, the [heatmap-overlay](https://github.com/vicapow/react-map-gl-heatmap-overlay) uses [webgl-heatmap](https://github.com/vicapow/webgl-heatmap) to create geographic heatmaps.\n\n<img width=200 src=\"https://cloud.githubusercontent.com/assets/499192/11028150/33f34640-86bc-11e5-9678-3fa1798394d5.gif\" />\n\n```js\nimport HeatmapOverlay from 'react-map-gl-heatmap-overlay';\nimport cities from 'example-cities';\n\n<MapGL {...viewport}>\n  <HeatmapOverlay locations={cities} {...viewport} />\n</MapGL>\n```\n\nWant to create and share your own overlay? Check the [examples/additional-overlays](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/additional-overlays) folder for examples.\n","slug":"docs/get-started/adding-custom-data","title":"Adding Custom Data"},{"excerpt":"Get Started Installation Using  requires  and . Example See full project setup in get-started examples Styling The current mapbox-gl release…","rawMarkdownBody":"# Get Started\n\n\n## Installation\n\nUsing `react-map-gl` requires `node >= v4` and `react >= 16.3`.\n\n```sh\nnpm install --save react-map-gl\n```\n\n## Example\n\n```js\nimport * as React from 'react';\nimport { useState } from 'react';\nimport ReactMapGL from 'react-map-gl';\n\nfunction Map() {\n  const [viewport, setViewport] = useState({\n    width: 400,\n    height: 400,\n    latitude: 37.7577,\n    longitude: -122.4376,\n    zoom: 8\n  });\n\n  return (\n    <ReactMapGL\n      {...viewport}\n      onViewportChange={nextViewport => setViewport(nextViewport)}\n    />\n  );\n}\n```\n\nSee full project setup in [get-started examples](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/get-started)\n\n## Styling\n\nThe current mapbox-gl release requires its stylesheet be included at all times. The marker, popup and navigation components in react-map-gl also need the stylesheet to work properly.\n\nYou may add the stylesheet to the head of your page:\n```html\n<!-- index.html -->\n<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v<YOUR_MAPBOX_VERSION>/mapbox-gl.css' rel='stylesheet' />\n```\n\nFind out your mapbox version by running `yarn list mapbox-gl` or `npm ls mapbox-gl`.\n\nOr embed it in your app by using - [browserify-css](https://www.npmjs.com/package/browserify-css)\nwith Browserify or - [css-loader](https://webpack.github.io/docs/stylesheets.html) with Webpack:\n\n```js\n// app.js\nimport 'mapbox-gl/dist/mapbox-gl.css';\n```\n\n## Enable Right-to-Left Language Support\n\n![Since v5.2.2](https://img.shields.io/badge/since-v5.2.2-green)\n\n```js\nimport {setRTLTextPlugin} from 'react-map-gl';\n\nsetRTLTextPlugin(\n  // find out the latest version at https://www.npmjs.com/package/@mapbox/mapbox-gl-rtl-text\n  'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js',\n  null,\n  // lazy: only load when the map first encounters Hebrew or Arabic text\n  true\n);\n```\n\nThis is the same as `import {setRTLTextPlugin} from 'mapbox-gl'` in the browser, but will not crash in node. The export mainly offers a convenience when using server-side rendering.\n\nTo use this API, consult Mapbox's [setRTLTextPlugin](https://docs.mapbox.com/mapbox-gl-js/api/#setrtltextplugin) documentation.\n\n\n## Using with Browserify, Webpack, and other JavaScript Bundlers\n\n* `browserify` - react-map-gl is extensively tested with `browserify` and works without configuration.\n\n* `webpack 2` - Most of the provided react-map-gl examples use webpack 2. Look at the [get started examples](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/get-started) folder for minimalist templates.\n\n* `create-react-app` - react-map-gl is compatible with [create-react-app](https://github.com/facebook/create-react-app).\n\n* `create-react-app-typescript` - react-map-gl is compatible with [create-react-app-typescript](https://github.com/wmonk/create-react-app-typescript). You can see an example [here](https://github.com/zackhsi/react-map-gl-typescript).\n\nThere's many other ready-to-run [examples](https://github.com/visgl/react-map-gl/tree/5.2-release/examples) you can take a look at if you need more inspiration.\n","slug":"docs/get-started/get-started","title":"Get Started"},{"excerpt":"About Mapbox Tokens react-map-gl and the underlying Mapbox GL JS libraries are open source and free to use. However, to load the map styles…","rawMarkdownBody":"# About Mapbox Tokens\n\nreact-map-gl and the underlying Mapbox GL JS libraries are open source and free to use. However, to load the map styles and tiles from Mapbox's data service, you will need to register on their website in order to retrieve an access token required by the map component, which will be used to identify you and start serving up map tiles. The service will be free until a certain level of traffic is exceeded.\n\nThere are several ways to provide a token to your app, as showcased in some of the example folders:\n\n* Set the `MapboxAccessToken` environment variable\n* Provide it in the URL, e.g `?access_token=TOKEN`\n* Pass it as a prop to the ReactMapGL instance `<ReactMapGL mapboxApiAccessToken={TOKEN} />`\n\nBut we would recommend using something like [dotenv](https://github.com/motdotla/dotenv) and put your key in an untracked `.env` file, that will then expose it as a `process.env` variable, with much less leaking risks.\n\n## Display Maps Without A Mapbox Token\n\nIt is possible to use the map component without the Mapbox service, if you use another tile source (for example, if you host your own map tiles). You will need a custom Mapbox GL style that points to your own [vector tile source](https://www.mapbox.com/mapbox-gl-js/style-spec/), and pass it to `ReactMapGL` using the `mapStyle` prop. This custom style must match the schema of your tile source. \n\nOpen source tile schemas include: \n\n- [TileZen schema](https://tilezen.readthedocs.io/en/latest/layers/)\n- [OpenMapTiles schema ](https://openmaptiles.org/schema/)\n\nSome useful resources for creating your own map service:\n\n- [Mapbox Vector Tile Spec](https://www.mapbox.com/developers/vector-tiles/)\n- [Open source tools](https://github.com/mapbox/awesome-vector-tiles)\n\nIf you are using a third party service that requires header based authentication, you can do this by defining a function to pass to `ReactMapGL` using the `transformRequest` prop.\n\nAn example function:\n\n```js\nconst transformRequest = (url, resourceType) => {\n        if (resourceType === 'Tile' && url.match('yourTileSource.com')) {\n            return {\n                url: url,\n                headers: { 'Authorization': 'Bearer ' + yourAuthToken }\n            }\n        }\n    }\n```\n","slug":"docs/get-started/mapbox-tokens","title":"About Mapbox Tokens"},{"excerpt":"What's new react-map-gl v5.2 Release date: Jan 6, 2020 Highlights New Components:  NavigationControl: new  prop GeolocateControl: new…","rawMarkdownBody":"# What's new\n\n## react-map-gl v5.2\n\nRelease date: Jan 6, 2020\n\n### Highlights\n\n- **New Components**: [`ScaleControl`](/docs/api-reference/scale-control.md)\n- **NavigationControl**: new `label` prop\n- **GeolocateControl**: new `label`, `onGeolocate` props\n- **New Export**: `WebMercatorViewport` is re-exported from the `viewport-mercator-project` library for ease of use. It's recommended to import it from `react-map-gl` instead to avoid future dependency change.\n- **New Example**: [Clusters](https://uber.github.io/react-map-gl/examples/clusters)\n\n## react-map-gl v5.1\n\nRelease date: Oct 30, 2019\n\n### Highlights\n\n- **New Components**: [`Layer`](/docs/api-reference/layer.md) and [`Source`](/docs/api-reference/source.md) have been added to provide better React parity with the `Mapbox GL JS` API.\n- **Viewport transition**: `transitionDuration` can be set to `'auto'` when using [`FlyToInterpolator`](/docs/api-reference/fly-to-interpolator.md).\n- **New Example**: Add an [example](https://uber.github.io/react-map-gl/examples/draw-polygon) with drawing library [react-map-gl-draw](https://github.com/uber/nebula.gl/tree/master/modules/react-map-gl-draw).\n\n## react-map-gl v5.0\n\nRelease date: May 31, 2019\n\n### What's Changed\n\nThe only change between the 5.0 release and the latest 4.1 release is Mapbox GL JS v1.0. By using this version, you opt into Mapbox's new pricing model, which bills per map load instead of map views. 5.0.x and 4.1.x will continue to update in parallel with otherwise identical features until November 2019 when Mapbox moves all users of 0.xx to a new pricing scheme. For more details, see mapbox's [changelog](https://github.com/mapbox/mapbox-gl-js/releases/tag/v1.0.0) and [blog post](https://blog.mapbox.com/new-pricing-46b7c26166e7). \n\nAlongside Mapbox GL JS's new milestone, we have relaxed the `mapbox-gl` dependency from locking minor release (`~0.53.0`) to major release (`^1.0.0`). This will allow developers to upgrade faster without waiting for a new release from react-map-gl.\n\n## react-map-gl v4.1\n\nRelease date: Mar 14, 2019 \n\n### Highlights\n\n- **New Components**: [`FullscreenControl`](/docs/api-reference/fullscreen-control.md), [`GeolocateControl`](/docs/api-reference/geolocate-control.md) have been added to provide better React parity with the `Mapbox GL JS` API.\n- **New callback props** `InteractiveMap` supports more callbacks:\n  + `onNativeClick`\n\n## react-map-gl v4.0\n\nRelease date: Nov 5, 2018\n\n### Highlights\n\n- **Relative dimensions** Both `InteractiveMap` and `StaticMap` now support CSS strings supplied to map `width` and `height` props. New `onResize` callback is fired when the map resizes.\n- **React 16** Upgrade to React 16.3 context and ref patterns\n- **Babel 7** Upgrade build system to Babel 7, better support for tree-shaking\n- **Style diffing** Now use Mapbox's native style diffing. Immutable is no longer required.\n- **Draggable Markers** `Marker` component now supports a new prop `draggable`, along with callbacks `onDragStart`, `onDrag`, and `onDragEnd`.\n- **3d Popups** `Popup` component now supports a new prop `sortByDepth` to enable proper occlusion when multiple popups are used in a tilted map.\n- **Interaction states** `onViewportChange` is now called with richer descriptors of the user interaction, including `isPanning`, `isZooming` and `isRotating`.\n- **Interactive layers** Dropped the requirement for the deprecated `interactive` property on the layer styles. Use the `interactiveLayerIds` prop to specify which layers are clickable.\n- **New callback props** `InteractiveMap` supports more callbacks:\n  + `onDblClick`\n  + `onMouseDown`\n  + `onMouseMove`\n  + `onMouseUp`\n  + `onTouchStart`\n  + `onTouchMove`\n  + `onTouchEnd`\n  + `onMouseEnter`\n  + `onMouseLeave`\n  + `onWheel`\n  + `onMouseOut`\n\nSee [upgrade guide](/docs/upgrade-guide.md) for breaking changes.\n\n## react-map-gl v3.3\n\nRelease date: July, 2018\n\n### Highlights\n\n- **New `viewState` Property**: Makes it possible to specify all map state properties (`longitude`, `latitude`, `zoom`, `bearing` and `pitch`) as a single property.\n- **New `onViewStateChange` callback**: An alternative callback that matches the new `viewState` prop.\n\n\n## react-map-gl v3.2\n\nRealease date: January, 2018\n\n### Highlights\n\n- **Viewport transition**: feature equivalent to Mapbox's flyTo and easeTo; smooth transition when using keyboard navigation or the NavigationControl.\n- **Better parity of Mapbox interaction**: navigation using keyboard and the navigation control matches Mapbox behavior, including smooth transition when zooming and panning.\n- **Support for Map Reuse (experimental)**: A new property `reuseMaps` is provided for applications that create and destroy maps, to help work around a mapbox-gl resource leak issue that can lead to a browser crash in certain situations.\n- **mapbox-gl 0.42.2**\n- **New props** of the InteractiveMap component:\n  + Map creation: `transformRequest`, `reuseMaps`\n  + Interaction: `touchZoom`, `touchRotate`\n  + Transition: `transitionDuration`, `transitionInterpolator`, `transitionEasing`, `transitionInterruption`, `onTransitionStart`, `onTransitionInterrupt`, `onTransitionEnd`\n\n\n## react-map-gl v3.1\n\nRelease date: October 19, 2017\n\n### Highlights\n\n- **Event handling**\n  + Support right mouse drag to rotate\n  + Support keyboard navigation\n  + Allow controls and overlays to block map interactions\n- **React 16** - react-map-gl is now being tested with React 16, but the React peer dependency requirement is unchanged at `>=15.4.x`.\n- **mapbox-gl v0.40.1**\n- **No Token warning**: react-map-gl now renders an HTML message if no mapbox token is supplied.\n\n\n## react-map-gl v3.0\n\nRelease date: July 27th, 2017\n\n### Highlights\n\n- **Latest Mapbox GL JS**: Bumps `Mapbox GL JS` to [0.38](https://github.com/mapbox/mapbox-gl-js/releases).\n- **Multi-Touch Support**: Full support for multi-touch gestures such as pinch-to-zoom and rotate.\n- **New Components**: The `MapGL` component has been split into [`StaticMap`](/docs/api-reference/static-map.md) and [`InteractiveMap`](/docs/api-reference/interactive-map.md) (the default). Also, [`Popup`](/docs/api-reference/popup.md), [`Marker`](/docs/api-reference/marker.md), [`NavigationControl`](/docs/api-reference/navigation-control.md) have been added to provide better React parity with the `Mapbox GL JS` API.\n- **Improved Overlay Components**: Supplying viewport props (`width` `height` `zoom` `longitude` and `latitude`) are no longer required if you render [`SVGOverlay`](/docs/api-reference/svg-overlay.md), [`CanvasOverlay`](/docs/api-reference/canvas-overlay.md) or [`HTMLOverlay`](/docs/api-reference/html-overlay.md) as a child of the map. Perspective mode is now supported in all overlays.\n- **New Props**: `maxPitch`, `minPitch`, `dragPan`, `doubleClickZoom`, `touchZoomRotate`,\n`scrollZoom` are now provided to allow granular control of map interactivity.\n- **Documentation**: Significantly expanded and linked with our other geospatial frameworks.\n- **Examples**: New stand-alone examples to get you started instantly with the new features.\n- **Event Handling**: New event handling architecture that enables full customization of event handling (experimental).\n\n### Components\n\n#### [InteractiveMap (New, MapGL replacement)](/docs/api-reference/interactive-map.md)\n\nThis is a wrapper on top of `StaticMap`. It takes all the props of `StaticMap` and additional ones such as `onViewportChange`, `scrollZoom`, `dragRotate`, etc. to control interactivity on the map. See [Source Code](https://github.com/visgl/react-map-gl/tree/3.0-release/src/components/interactive-map.js) for more information.\n\n#### [StaticMap (New)](/docs/api-reference/static-map.md)\n\nThis is the React wrapper around `Mapbox GL JS` and takes in viewport properties such as `width`, `height`, `latitude`, `longitude`. Style diffing and updating logic also live here. See [Source Code](https://github.com/visgl/react-map-gl/tree/3.0-release/src/components/static-map.js) for more information.\n\n#### Overlays\n\n* Three overlays (`ScatterplotOverlay`, `DraggablePointsOverlay`, `ChoroplethOverlay`), have been moved out of the library and are now only provided as examples.\n\n### Property Changes\n\n- **Property Names** - some prop names have been modernized, the old ones will still work for now with a warning.\n- **Internal Properties** such as `isHovering`, `isDragging`, `startDragLngLat` have been removed.\nThese were never meant to be useful publicly and have caused confusions in the past.\n\n### Utilities\n\n* **fitBounds**: `fitBounds` has been moved to another repository and has been rewritten to provide a more logical interface.\n\nFor more information, see the `Upgrade Guide`.\n\n\n## react-map-gl v2.0\n\nDate: Jan 17, 2017\n\n### Highlights\n- **Latest mapbox-gl**: Bump `mapbox-gl` to v0.31.0\n- **new maxZoom prop** - Add `maxZoom` prop and defaults to `20`\n- **New onLoad prop** - Add `onLoad` event handler\n- **new onClick prop** - Add `onClick` prop handler (#140)\n\n\n## react-map-gl v1.0\n\n* **Perspective Mode** - Now supports `bearing` and `pitch` properties, per mapbox-gl-js api documentation. These props default to 0 which means that maps will still be rendered in flat/ortographic mode when they are not provided\n* **Support for ES6 imports** - The map overlay components (HTMLOverlay, CanvasOverlay, SVGOverlay etc) previously had to be imported via their relative source paths can now be imported directly using `import {SVGOverlay} from 'react-map-gl'.\n\n\n## react-map-gl v0.6\n\nInitial public version\n","slug":"docs/whats-new","title":"What's new"},{"excerpt":"State Management  is designed to be a stateless component. Its appearance is entirely controlled by the properties that are passed in from…","rawMarkdownBody":"# State Management\n\n`InteractiveMap` is designed to be a stateless component. Its appearance is entirely controlled by the properties that are passed in from its parent. In this architecture, transition works the same way as interaction: the component shall notify the application of \"user intent\" by calling the `onViewportChange` callback, but ultimately the application needs to decide what to do with it.\n\nThe most simple handling of this intent is to save it and pass it back to the component:\n```jsx\n<ReactMapGL\n    {...this.state.viewport}\n    onViewportChange={(viewport) => this.setState({viewport})} />\n```\n\nUser interaction and transition will not work without a valid `onViewportChange` handler.\n\nThe advantage of this practice is that it ensures a single source of truth regarding the viewport state (in the example above, saved in the `state` of the container component). When you use this viewport state to direct the rendering of other components, it is guaranteed that they will always be synced with the map.\n\nYou may apply additional constraints to the viewport:\n\n```jsx\n_onViewportChange = viewport => {\n    if (viewport.longitude > 0) {\n        viewport.longitude = 0;\n    }\n    this.setState({viewport});\n}\n\nrender() {\n    return <ReactMapGL {...this.state.viewport} onViewportChange={this._onViewportChange} />\n}\n```\n\nOr manipulate the viewport outside of the ReactMap component:\n\n```jsx\n_goToNYC = () => {\n    const viewport = {...this.state.viewport, longitude: -74.1, latitude: 40.7};\n    this.setState({viewport});\n}\n\nrender() {\n    return (\n        <div>\n            <ReactMapGL {...this.state.viewport} onViewportChange={this._onViewportChange} />\n            <button onClick={this._goToNYC}>New York City</button>\n        </div>\n    );\n}\n```\n\n\n## Using with Redux\n\nIf you're using redux, it is very easy to hook this component up to store state in the redux state tree.\nThe simplest way is to take all properties passed to the `onViewportChange` function property and add them\ndirectly into the store. This state can then be passed back to the `<ReactMapGL>` component without any transformation.\n","slug":"docs/get-started/state-management","title":"State Management"},{"excerpt":"FlyToInterpolator Since v3.2 Implements the  interface. Designed to use with the  prop of InteractiveMap. This interpolator offers similar…","rawMarkdownBody":"# FlyToInterpolator\n\n![Since v3.2](https://img.shields.io/badge/since-v3.2-green)\n\nImplements the `TransitionInterpolator` interface. Designed to use with the `transitionInterpolator` prop of [InteractiveMap](/docs/api-reference/interactive-map.md).\n\nThis interpolator offers similar behavior to Mapbox's `flyTo` method.\n\n```jsx\nimport ReactMapGL, {FlyToInterpolator} from 'react-map-gl';\n\n<ReactMapGL\n    ...\n    transitionDuration={1000}\n    transitionInterpolator={new FlyToInterpolator()} />\n```\n\n## Constructor\n\n`new FlyToInterpolator([options])`\n\nParameters:\n- `options` {Object} (optional)\n  + `curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n  - `speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n  - `screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n  - `maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n\n\n## Source\n\n[viewport-fly-to-interpolator.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/utils/transition/viewport-fly-to-interpolator.js)\n","slug":"docs/api-reference/fly-to-interpolator","title":"FlyToInterpolator"},{"excerpt":"Canvas Overlay Allows applications to overlay data on top of maps using a canvas. Properties  (Function) Called every time the map updates…","rawMarkdownBody":"# Canvas Overlay\n\nAllows applications to overlay data on top of maps using a canvas.\n\n## Properties\n\n##### `redraw` (Function)\n\nCalled every time the map updates.\n\nParameters:\n- `ctx` {CanvasRenderingContext2D} - rendering context of the canvas\n- `width` {Number} - width of the viewport\n- `height` {Number} - height of the viewport\n- `project` {Function} - get screen position `[x, y]` from geo coordinates `[lng, lat]`\n- `unproject` {Function} - get geo coordinates `[lng, lat]` from screen position `[x, y]`\n\n##### `captureScroll` (Boolean)\n\n- default: `false`\n\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` (Boolean)\n\n- default: `false`\n\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged.\n\n##### `captureClick` (Boolean)\n\n- default: `false`\n\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` (Boolean)\n\n- default: `false`\n\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n\n## Source\n[canvas-overlay.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/overlays/canvas-overlay.js)\n\n","slug":"docs/api-reference/canvas-overlay","title":"Canvas Overlay"},{"excerpt":"Fullscreen Control Since v4.1 This is a React equivalent of Mapbox's FullscreenControl. Properties  (HTMLElement)  is the compatible DOM…","rawMarkdownBody":"# Fullscreen Control\n\n![Since v4.1](https://img.shields.io/badge/since-v4.1-green)\n\nThis is a React equivalent of Mapbox's [FullscreenControl](https://www.mapbox.com/mapbox-gl-js/api/#fullscreencontrol).\n\n```js\nimport {Component} from 'react';\nimport ReactMapGL, {FullscreenControl} from 'react-map-gl';\n\nclass Map extends Component {\n  render() {\n    const {viewport, updateViewport} = this.props;\n    return (\n      <ReactMapGL {...viewport} onViewportChange={updateViewport}>\n        <div style={{position: 'absolute', right: 0}}>\n          <FullscreenControl container={document.querySelector('body')}/>\n        </div>\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\n##### `container` (HTMLElement)\n\n`container` is the compatible DOM element which should be made full screen. By default, the map container element will be made full screen.\n\n## Styling\n\nLike its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page.\n\n## Source\n[fullscreen-control.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/fullscreen-control.js)\n\n","slug":"docs/api-reference/fullscreen-control","title":"Fullscreen Control"},{"excerpt":"HTML Overlay Allows applications to overlay data on top of maps using a HTML container. Properties  (Function) Called every time the map…","rawMarkdownBody":"# HTML Overlay\n\nAllows applications to overlay data on top of maps using a HTML container.\n\n## Properties\n\n##### `redraw` (Function)\n\nCalled every time the map updates.\n\nParameters:\n- `width` {Number} - width of the viewport\n- `height` {Number} - height of the viewport\n- `project` {Function} - get screen position `[x, y]` from geo coordinates `[lng, lat]`\n- `unproject` {Function} - get geo coordinates `[lng, lat]` from screen position `[x, y]`\n\n##### `style` (Object)\n\nAdditional css styles of the `div` container.\n\n##### `captureScroll` (Boolean)\n\n- default: `false`\n\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` (Boolean)\n\n- default: `false`\n\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged.\n\n##### `captureClick` (Boolean)\n\n- default: `false`\n\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` (Boolean)\n\n- default: `false`\n\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n## Source\n\n[html-overlay.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/overlays/html-overlay.js)\n","slug":"docs/api-reference/html-overlay","title":"HTML Overlay"},{"excerpt":"Geolocate Control Since v4.1 This is a React equivalent of Mapbox's GeolocateControl. Properties Accepts all the options of Mapbox…","rawMarkdownBody":"# Geolocate Control\n\n![Since v4.1](https://img.shields.io/badge/since-v4.1-green)\n\nThis is a React equivalent of Mapbox's [GeolocateControl](https://www.mapbox.com/mapbox-gl-js/api/#geolocatecontrol).\n\n```js\nimport * as React from 'react';\nimport { Component } from \"react\";\nimport ReactMapGL, {GeolocateControl} from \"react-map-gl\";\n\nclass Map extends Component {\n  state = {\n    viewport: {longitude: -122.45, latitude: 37.78, zoom: 14}\n  }\n\n  render() {\n    const {viewport} = this.state;\n    return (\n      <ReactMapGL {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        onViewportChange={viewport => this.setState({viewport})}>\n        <GeolocateControl\n          positionOptions={{enableHighAccuracy: true}}\n          trackUserLocation={true}\n        />\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\nAccepts all the options of [Mapbox GeolocatControl](https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol).\n\n##### `onViewportChange` (Function, optional)\n\nCallback when the user interaction with this control requests a viewport update. If provided, will be called instead of the containing [InteractiveMap](/docs/api-reference/interactive-map.md)'s `onViewportChange`.\n\n##### `onGeolocate` (Function, optional)\n\nCallback when Geolocation API position updates. It is called with a Geolocation API [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) object.\n\n##### `positionOptions` (Object)\n\n- default: `{enableHighAccuracy: false, timeout: 6000}` \n\nA Geolocation API [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) object.\n\n##### `fitBoundsOptions` (Object)\n\n- default: `{maxZoom: 15}` \n\nA [fitBounds](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) options object to use when the map is panned and zoomed to the user's location. The default is to use a  maxZoom of 15 to limit how far the map will zoom in for very accurate locations.\n\n##### `trackUserLocation` (Boolean)\n\n- default: `false`\n\nIf true the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes.\n\n##### `showUserLocation` (Boolean)\n\n- default: `true`\n\nBy default a dot will be shown on the map at the user's location. Set to false to disable.\n\n##### `style` (Object)\n\nA [React style](https://reactjs.org/docs/dom-elements.html#style) object applied to Geolocate control button.\n\nCheck [`locate user`](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/locate-user/src/app.js) example for basic styling.\n\n##### `label` (String)\n\n- default: `Geolocate`\n\nLabel applied to the Geolocate control button.\n\n\n## Styling\n\nLike its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page.\n\n## Source\n\n[geolocate-control.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/geolocate-control.js)\n","slug":"docs/api-reference/geolocate-control","title":"Geolocate Control"},{"excerpt":"InteractiveMap Since v3.0 This component renders  and provides full interactivity support.\nIt uses  underneath to render the final map…","rawMarkdownBody":"# InteractiveMap\n\n![Since v3.0](https://img.shields.io/badge/since-v3.0-green)\n\nThis component renders `MapboxGL` and provides full interactivity support.\nIt uses `StaticMap` underneath to render the final map component.\nThis is the `default` exported component from `ReactMapGL`.\n\n```js\nimport {Component} from 'react';\nimport ReactMapGL from 'react-map-gl';\n\nclass Map extends Component {\n  render() {\n    return (\n      <ReactMapGL\n        width={400}\n        height={400}\n        latitude={37.7577}\n        longitude={-122.4376}\n        zoom={8}\n        onViewportChange={(viewport) => {\n          const {width, height, latitude, longitude, zoom} = viewport;\n          // call `setState` and use the state to update the map.\n        }}\n      />\n    );\n  }\n}\n```\n\n## Properties\n\n### Initialization\n\nInherit the following props from [StaticMap](/docs/api-reference/static-map.md):\n\n- `attributionControl` (Boolean)\n- `disableTokenWarning` (Boolean)\n- `gl` (WebGLContext)\n- `mapboxApiAccessToken` (String)\n- `mapboxApiUrl` (String)\n- `mapOptions` (Object)\n- `preserveDrawingBuffer` (Boolean)\n- `preventStyleDiffing` (Boolean)\n- `reuseMaps` (Boolean)\n- `transformRequest` (Function)\n\n\n### Map State\n\nInherit the following props from [StaticMap](/docs/api-reference/static-map.md):\n\n- `mapStyle` (String | Object | Immutable.Map)\n- `width` (Number | String)\n- `height` (Number | String)\n- `latitude` (Number)\n- `longitude` (Number)\n- `zoom` (Number)\n- `bearing` (Number)\n- `pitch` (Number)\n- `altitude` (Number)\n- `viewState` (Object)\n\n\n### Render Options\n\nInherit the following props from [StaticMap](/docs/api-reference/static-map.md):\n\n- `style` (Object)\n- `visible` (Boolean)\n- `visibilityConstraints` (Object)\n\n##### `getCursor` (Function)\n\nAccessor that returns a cursor style to show interactive state. Called when the component is being rendered.\n\nParameters\n- `state` - The current state of the component.\n  + `state.isDragging` - If the map is being dragged.\n  + `state.isHovering` - If the pointer is over an interactive feature. See `interactiveLayerIds` prop.\n\nThe default implementation of `getCursor` returns `'pointer'` if `isHovering`, `'grabbing'` if `isDragging` and `'grab'` otherwise.\n\n\n### Interaction Options\n\n##### `maxZoom` (Number)\n\n- default: `20`\n\nMax zoom level.\n\n##### `minZoom` (Number)\n\n- default: `0`\n\nMin zoom level.\n\n##### `maxPitch` (Number)\n\n- default: `60`\n\nMax pitch in degrees.\n\n##### `minPitch` (Number)\n\n- default: `0`\n\nMin pitch in degrees.\n\n##### `scrollZoom` (Boolean)\n\n- default: `true`\n\nEnable scroll to zoom.\n\n##### `dragPan` (Boolean)\n\n- default: `true`\n\nEnable drag to pan.\n\n##### `dragRotate` (Boolean)\n\n- default: `true`\n\nEnable drag to rotate.\n\n##### `doubleClickZoom` (Boolean)\n\n- default: `true`\n\nEnable double click to zoom.\n\n##### `touchZoom` (Boolean)\n\n- default: `true`\n\nEnable multitouch zoom.\n\n##### `touchRotate` (Boolean)\n\n- default: `false`\n\nEnable multitouch rotate.\n\n##### `touchAction` (String)\n\n- default: `'none'`\n\nAllow browser default touch actions. Default `none`. See [hammer.js doc](http://hammerjs.github.io/touch-action/).\n\nBy default, the map captures all touch interactions. This prop is useful for mobile applications to unblock default scrolling behavior. For example, use the combination `dragPan: false` and `touchAction: 'pan-y'` to allow vertical page scroll when dragging over the map.\n\n\n##### `clickRadius` (Number)\n\n- default: `0`\n\nRadius to detect features around a clicked point.\n\n##### `controller` (Object)\n\nA map controller instance to replace the default map controller.\n\nThis object must implement the following interface:\n- `events` - An array of subscribed events\n- `handleEvent(event, context)` - A method that handles interactive events\n\n##### `interactiveLayerIds` (Array)\n\n- default: `null`\n\nA list of layer ids that are interactive. If specified:\n- Pointer event callbacks will only query the features under the pointer of these layers.\n- The `getCursor` callback will receive `isHovering: true` when hover over features of these layers.\n\nIf not specified:\n- Pointer event callbacks will query the features under the pointer of all layers.\n- The `getCursor` callback will always receive `isHovering: false`.\n\n\n### Transitions\n\n##### `transitionDuration` (Number)\n\n- default: `0`\n\nDuration of transition in milliseconds. If specified, the map's viewport will smoothly move from the previous props to the current one.\n\n##### `transitionInterpolator` (Object)\n\n- default: `new LinearInterpolator()`\n\nAn interpolator object that defines the transition behavior between two map states. `react-map-gl` offers two interpolators:\n- `LinearInterpolator` - similar to Mapbox's `easeTo` behavior.\n- `FlyToInterpolator` - similar to Mapbox's `flyTo` behavior.\n\nYou may import them as follows:\n```jsx\nimport ReactMapGL, {LinearInterpolator, FlyToInterpolator} from 'react-map-gl';\n\n<ReactMapGL transitionDuration={1000} transitionInterpolator={new FlyToInterpolator()}>\n```\n\nFor details about using transition interpolators, see [transitions](/docs/advanced/viewport-transitions.md).\n\n##### `transitionEasing` (Function)\n\n- default: `t => t`\n\nEasing function that maps a value from `[0, 1]` to `[0, 1]`. Check out [http://easings.net/](http://easings.net/) for common easing curves.\n\n##### `transitionInterruption` (Number)\n\n- default: `TRANSITION_EVENTS.BREAK`\n\nWhat to do if an ongoing transition is interrupted by another transition. There are 4 options:\n- `TRANSITION_EVENTS.BREAK` - Start new transition from the current view.\n- `TRANSITION_EVENTS.SNAP_TO_END` - Jump to the end of the previous transition before starting the new transition.\n- `TRANSITION_EVENTS.IGNORE` - Complete the previous transition and ignore the new viewport change.\n- `TRANSITION_EVENTS.UPDATE` - Continue the ongoing transition but change its destination to the new viewport.\n\nYou may import the constants as follows:\n\n```js\nimport {TRANSITION_EVENTS} from 'react-map-gl';\n```\n\n\n### Callbacks\n\nInherit the following props from [StaticMap](/docs/api-reference/static-map.md):\n\n- `onLoad` (Function)\n- `onResize` (Function)\n- `onError` (Function)\n\n\n##### `onViewportChange` (Function)\n\nCallback that is fired when the map's viewport properties should be updated. If not supplied, the map is not interactive.\n\n```js\nonViewportChange(viewState, interactionState, oldViewState);\n```\n\nArguments:\n\n- `viewState` (Object) The next viewport properties, including: `width`, `height`, `latitude`, `longitude`, `zoom`, `bearing`, `pitch`, `altitude`, `maxZoom`, `minZoom`, `maxPitch`, `minPitch`, `transitionDuration`, `transitionEasing`, `transitionInterpolator`, `transitionInterruption`.\n- `interactionState` (Object) The current interaction that caused this viewport change. See `onInteractionStateChange` for possible fields.\n- `oldViewState` (Object) The current viewport properties.\n\n\n##### `onViewStateChange` (Function)\n\nA newer version of the `onViewportChange` callback. Both are supported and provide equivalent functionality.\n\n```js\nonViewStateChange({viewState, interactionState, oldViewState});\n```\n\n\n##### `onInteractionStateChange` (Function)\n\nCallback that is fired when the user interacted with the map.\n\n```js\nonInteractionStateChange(interactionState)\n```\n\nPossible fields include:\n\n- `interactionState.inTransition` (Boolean)\n- `interactionState.isDragging` (Boolean)\n- `interactionState.isPanning` (Boolean)\n- `interactionState.isRotating` (Boolean)\n- `interactionState.isZooming` (Boolean)\n\nNote:\n* `onInteractionStateChange` may be fired without `onViewportChange`. For example, when the pointer is released at the end of a drag-pan, `isDragging` are reset to `false`, without the viewport's `longitude` and `latitude` changing.\n\n\n##### `onHover` (Function)\n\nCalled when the mouse moves over the map (without button pressed). Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onClick` (Function)\n\nCalled when the map is single clicked. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object. This event is not fired on double click therefore there may be a delay between pointer up and the event.\n\n##### `onNativeClick` (Function)\n\nCalled when the map is clicked. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object. This event is fired twice on double click.\n\n##### `onDblClick` (Function)\n\nCalled when the map is double clicked. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onMouseDown` (Function)\n\nCalled when a pointing device (usually a mouse) is pressed within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onMouseMove` (Function)\n\nCalled when a pointing device (usually a mouse) is moved within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onMouseUp` (Function)\n\nCalled when a pointing device (usually a mouse) is released within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onTouchStart` (Function)\n\nCalled when a `touchstart` event occurs within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onTouchMove` (Function)\n\nCalled when a `touchmove` event occurs within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onTouchEnd` (Function)\n\nCalled when a `touchend` event occurs within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onMouseEnter` (Function)\n\nCalled when a pointing device (usually a mouse) enters a visible portion of one of the interactive layers, defined by the `interactiveLayerIds` prop. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onMouseLeave` (Function)\n\nCalled when a pointing device (usually a mouse) leaves a visible portion of one of the interactive layers, defined by the `interactiveLayerIds` prop. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onWheel` (Function)\n\nCalled when a `wheel` event occurs within the map. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onMouseOut` (Function)\n\nCalled when a point device (usually a mouse) leaves the map's canvas. Receives a [PointerEvent](/docs/api-reference/pointer-event.md) object.\n\n##### `onContextMenu` (Function)\n\nCalled when the context menu is activated. Prevent default here to enable right button interaction.\n\nDefault: `event => event.preventDefault()`\n\n##### `onTransitionStart` (Function)\n\nCallback that is fired when a transition is triggered.\n\n##### `onTransitionInterrupt` (Function)\n\nCallback that is fired when an ongoing transition is interrupted by another transition.\n\n##### `onTransitionEnd` (Function)\n\nCallback that is fired when a transition is complete.\n\n## Methods\n\nInherit the following methods from [StaticMap](/docs/api-reference/static-map.md):\n\n- `getMap()`\n- `queryRenderedFeatures(geometry, parameters)`\n\n\n## Source\n\n[interactive-map.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/interactive-map.js)\n\n","slug":"docs/api-reference/interactive-map","title":"InteractiveMap"},{"excerpt":"MapController Since v4.0 The easiest way to create a custom map control is to extend the default  class. Properties  (Array) A list of…","rawMarkdownBody":"# MapController\n\n![Since v4.0](https://img.shields.io/badge/since-v4.0-green)\n\nThe easiest way to create a custom map control is to extend the default `MapController` class.\n\n## Properties\n\n##### `events` (Array)\n\nA list of additional event names that this control subscribes to.\n\nAvailable events: `click`, `dblclick`, `tap`, `doubletap`, `press`, `pinch`, `pinchin`, `pinchout`, `pinchstart`, `pinchmove`, `pinchend`, `pinchcancel`, `rotate`, `rotatestart`, `rotatemove`, `rotateend`, `rotatecancel`, `pan`, `panstart`, `panmove`, `panup`, `pandown`, `panleft`, `panright`, `panend`, `pancancel`, `swipe`, `swipeleft`, `swiperight`, `swipeup`, `swipedown`, `pointerdown`, `pointermove`, `pointerup`, `keydown`, and `keyup`.\n\nThe following events are toggled on/off by InteractiveMap props: \n\n- `scrollZoom` - `['wheel']`\n- `dragPan` and `dragRotate` - `['panstart', 'panmove', 'panend']`\n- `touchZoomRotate` - `['pinchstart', 'pinchmove', 'pinchend']`\n- `doubleClickZoom` - `['doubletap']`\n- `keyboard` - `['keydown']`\n\nEvent object is generated by [mjolnir.js](https://github.com/uber-web/mjolnir.js). It always has the following properties:\n\n* `type` (string) -  The event type to which the event handler is subscribed, e.g. `'click'` or `'pointermove'`\n* `center` (Object `{x, y}`) - The center of the event location (e.g. the centroid of a touch) relative to the viewport (basically, [`clientX/Y`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX))\n* `offsetCenter` (Object `{x, y}`) - The center of the event location relative to the map.\n* `target` (Object) - The target of the event, as specified by the original `srcEvent`\n* `srcEvent` (Object) - The original event object dispatched by the browser to the JS runtime\n\nAdditionally, event objects for different event types contain a subset of the following properties:\n\n* `key` (number) - The keycode of the keyboard event\n* `leftButton` (boolean) - Flag indicating whether the left button is involved during the event\n* `middleButton` (boolean) - Flag indicating whether the middle button is involved during the event\n* `rightButton` (boolean) - Flag indicating whether the right button is involved during the event\n* `pointerType` (string) - A string indicating the type of input (e.g. `'mouse'`, `'touch'`, `'pointer'`)\n* `delta` (number) - The scroll magnitude/distance of a wheel event\n\n\n## Methods\n\n##### `handleEvent`\n\n`handleEvent(event)`\n\nCalled by the event manager to handle pointer events. This method delegate to the following methods to handle the default events:\n- `_onPanStart(event)`\n- `_onPan(event)`\n- `_onPanEnd(event)`\n- `_onPinchStart(event)`\n- `_onPinch(event)`\n- `_onPinchEnd(event)`\n- `_onDoubleTap(event)`\n- `_onWheel(event)`\n- `_onKeyDown(event)`\n\n##### `getMapState`\n\n`getMapState(overrides)`\n\nGet a new descriptor object of the map state. If specified, props in the `overrides` object override the current map props.\n\n##### `setOptions`\n\n`setOptions(options)`\n\nAdd/remove event listeners based on the latest `InteractiveMap` props.\n\n##### `setState`\n\n`setState(newState)`\n\nSave a persistent state (e.g. isDragging) for future use.\n\n##### `updateViewport`\n\n`updateViewport(newMapState, extraProps, extraState)`\n\nInvoke `onViewportChange` callback with a new map state.\n\n\n## Source\n\n[map-controller.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/utils/map-controller.js)\n","slug":"docs/api-reference/map-controller","title":"MapController"},{"excerpt":"LinearInterpolator Since v3.2 Implements the  interface. Designed to use with the  prop of InteractiveMap. Interpolates all viewport props…","rawMarkdownBody":"# LinearInterpolator\n\n![Since v3.2](https://img.shields.io/badge/since-v3.2-green)\n\nImplements the `TransitionInterpolator` interface. Designed to use with the `transitionInterpolator` prop of [InteractiveMap](/docs/api-reference/interactive-map.md).\n\nInterpolates all viewport props linearly. This interpolator offers similar behavior to Mapbox's `easeTo` when combined with a `transitionEasing` function. You may optionally limit the transition to selected viewport props, for example `new LinearInterpolator(['pitch', 'bearing'])` animates pitch and bearing while the user is still allowed to pan and zoom.\n\n```jsx\nimport ReactMapGL, {LinearInterpolator} from 'react-map-gl';\n\n<ReactMapGL\n    ...\n    transitionDuration={1000}\n    transitionInterpolator={new LinearInterpolator()} />\n```\n\n## Constructor\n\n`new LinearInterpolator([options])`\n\nParameters:\n- `options` {Object} (optional)\n  + `transitionProps` {Array} (optional) - list of prop names to interpolate. Default: `['longitude', 'latitude', 'zoom', 'pitch', 'bearing']`.\n  + `around` {Array} (optional) - a point to zoom/rotate the map around, as `[x, y]` in screen position.\n\n\n## Source\n\n[linear-interpolator.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/utils/transition/linear-interpolator.js)\n\n","slug":"docs/api-reference/linear-interpolator","title":"LinearInterpolator"},{"excerpt":"Layer Since v5.1 This component allows apps to create a map layer using React. Properties The props provided to this component should be…","rawMarkdownBody":"# Layer\n\n![Since v5.1](https://img.shields.io/badge/since-v5.1-green)\n\nThis component allows apps to create a [map layer](https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers) using React.\n\n```js\nimport * as React from 'react';\nimport ReactMapGL, {Layer} from 'react-map-gl';\n\nconst parkLayer = {\n  id: 'landuse_park',\n  type: 'fill',\n  source: 'mapbox',\n  'source-layer': 'landuse',\n  filter: ['==', 'class', 'park']\n};\n\nclass Map extends React.Component {\n  render() {\n    const {parkColor = '#dea'} = this.props;\n    return (\n      <ReactMapGL latitude={37.78} longitude={-122.41} zoom={8}>\n        <Layer {...parkLayer} paint={{'fill-color': parkColor}} />\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\nThe props provided to this component should be conforming to the [Mapbox layer specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers).\n\nWhen props change *shallowly*, the component will perform style diffing to update the layer. Avoid defining constant objects/arrays inline may help performance.\n\n### Identity Properties\n\nOnce a `<Layer>` is mounted, the following props should not change. If you add/remove multiple JSX layers dynamically, make sure you use React's [key prop](https://reactjs.org/docs/lists-and-keys.html#keys) to give each element a stable identity.\n\n##### `id` (String)\n\nUnique identifier of the layer. If not provided, a default id will be assigned.\n\n##### `type` (String, required)\n\nType of the layer.\n\n### Options\n\n##### `beforeId` (String)\n\nThe ID of an existing layer to insert this layer before. If this prop is omitted, the layer will be appended to the end of the layers array. This is useful when using dynamic layers with a map style from a URL.\n\nNote that layers are added by the order that they mount. They are *NOT* reordered later if their relative positions in the JSX tree change. If dynamic reordering is desired, you should manipulate `beforeId` for consistent behavior.\n\n##### `source` (String)\n\n`source` is required by some layer types in the Mapbox style specification. If `<Layer>` is used as the child of a [Source](/docs/api-reference/source.md) component, this prop will be overwritten by the id of the parent source.\n\n\n## Source\n\n[layer.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/layer.js)\n\n","slug":"docs/api-reference/layer","title":"Layer"},{"excerpt":"Navigation Control Since v3.0 This is a React equivalent of Mapbox's NavigationControl,\nwhich provides zoom buttons and a compass button…","rawMarkdownBody":"# Navigation Control\n\n![Since v3.0](https://img.shields.io/badge/since-v3.0-green)\n\nThis is a React equivalent of Mapbox's [NavigationControl](https://www.mapbox.com/mapbox-gl-js/api/#navigationcontrol),\nwhich provides zoom buttons and a compass button.\n\n```js\nimport * as React from 'react';\nimport {Component} from 'react';\nimport ReactMapGL, {NavigationControl} from 'react-map-gl';\n\nclass Map extends Component {\n  state = {\n    viewport: {longitude: -122.45, latitude: 37.78, zoom: 12}\n  };\n\n  render() {\n    const {viewport} = this.state;\n    return (\n      <ReactMapGL {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        onViewportChange={viewport => this.setState({viewport})}>\n        <div style={{position: 'absolute', right: 0}}>\n          <NavigationControl />\n        </div>\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\n##### `onViewportChange` (Function)\n\nCallback when the user interaction with this control requests a viewport update. If provided, will be called instead of the containing [InteractiveMap](/docs/api-reference/interactive-map.md)'s `onViewportChange`.\n\n##### `showCompass` (Boolean)\n\n- default: `true`\n\nShow or hide the compass button\n\n##### `showZoom` (Boolean)\n\n- default: `true`\n\nShow or hide the zoom buttons\n\n##### `captureScroll` (Boolean)\n\n- default: `false`\n\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` (Boolean)\n\n- default: `true`\n\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged.\n\n##### `captureClick` (Boolean)\n\n- default: `true`\n\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` (Boolean)\n\n- default: `true`\n\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n##### `zoomInLabel` (String)\n\n- default: `Zoom In`\n\nLabel applied to the zoom in control button.\n\n##### `zoomOutLabel` (String)\n\n- default: `Zoom Out`\n\nLabel applied to the zoom out control button.\n\n##### `compassLabel` (String)\n\n- default: `Reset North`\n\nLabel applied to the compass control button.\n\n## Styling\n\nLike its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page.\n\n## Source\n\n[navigation-control.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/navigation-control.js)\n\n","slug":"docs/api-reference/navigation-control","title":"Navigation Control"},{"excerpt":"PointerEvent Event object passed to some of InteractiveMap's callback props. Members  (String) The name of the event.  (Array) The screen…","rawMarkdownBody":"# PointerEvent\n\nEvent object passed to some of [InteractiveMap](/docs/api-reference/interactive-map.md)'s callback props.\n\n## Members\n\n##### `type` (String)\n\nThe name of the event.\n\n##### `point` (Array)\n\nThe screen coordinates that is being clicked.\n\n##### `lngLat` (Array)\n\nThe geo coordinates that is being clicked.\n\n##### `target` (Element)\n\nThe target element of the pointer event.\n\n##### `srcEvent` (Object)\n\nThe original browser event.\n","slug":"docs/api-reference/pointer-event","title":"PointerEvent"},{"excerpt":"Marker Control Since v3.0 This is a React equivalent of Mapbox's\nMarker Control, which can\nbe used to render custom icons at specific…","rawMarkdownBody":"# Marker Control\n\n![Since v3.0](https://img.shields.io/badge/since-v3.0-green)\n\nThis is a React equivalent of Mapbox's\n[Marker Control](https://www.mapbox.com/mapbox-gl-js/api/#marker), which can\nbe used to render custom icons at specific locations on the map.\n\n```js\nimport {Component} from 'react';\nimport ReactMapGL, {Marker} from 'react-map-gl';\n\nclass Map extends Component {\n  render() {\n    return (\n      <ReactMapGL latitude={37.78} longitude={-122.41} zoom={8}>\n        <Marker latitude={37.78} longitude={-122.41} offsetLeft={-20} offsetTop={-10}>\n          <div>You are here</div>\n        </Marker>\n      </ReactMapGL>\n    );\n  }\n}\n```\n\nPerformance notes: if a large number of markers are needed, it's generally favorable to cache the `<Marker>` nodes, so that we don't rerender them when the viewport changes.\n\n```js\nimport * as React from 'react';\nimport {PureComponent} from 'react';\nimport ReactMapGL, {Marker} from 'react-map-gl';\n\nconst CITIES = [...];\n\n// PureComponent ensures that the markers are only rerendered when data changes\nclass Markers extends PureComponent {\n  render() {\n    const {data} = this.props;\n    return data.map(\n      city => <Marker key={city.name} longitude={city.longitude} latitude={city.latitude} ><img src=\"pin.png\" /></Marker>\n    )\n  }\n}\n\nclass Map extends PureComponent {\n  state = {\n    viewport: {\n      latitude: 37.78,\n      longitude: -122.41,\n      zoom: 8\n    }\n  };\n\n  render() {\n    return (\n      <ReactMapGL {...this.state.viewport} onViewportChange={viewport => this.setState({viewport})}>\n        <Markers data={CITIES} />\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n\n## Properties\n\n##### `latitude` (Number, required)\nLatitude of the marker.\n\n##### `longitude` (Number, required)\nLongitude of the marker.\n\n##### `offsetLeft` (Number)\n\n- default: `0`\n\nOffset of the marker from the left in pixels, negative number indicates left.\n\n##### `offsetTop` (Number)\n\n- default: `0`\n\nOffset of the marker from the top in pixels, negative number indicates up.\n\n##### `draggable` (Boolean)\n\n- default: `false`\n\nAllows this marker component to be dragged around the map. (Use `onDragEnd` to capture the final position and update `longitude` and `latitude`).\n\n##### `onDragStart` (Function)\n\nCalled when a draggable marker starts being dragged.\n\nParameters:\n\n- `event` - The pointer event.\n  + `event.lngLat` - The geo coordinates where the drag started, as `[lng, lat]`.\n\n##### `onDrag` (Function)\n\nContinuously called while a draggable marker is being dragged.\n\nParameters:\n\n- `event` - The pointer event.\n  + `event.lngLat` - The geo coordinates of the drag event, as `[lng, lat]`.\n\n##### `onDragEnd` (Function)\n\nCalled when a draggable marker is released at its final position. This is usually a good time to capture `event.lngLat` and update the marker's `longitude` and `latitude` props.\n\nParameters:\n\n- `event` - The pointer event.\n  + `event.lngLat` - The geo coordinates where the drag ended, as `[lng, lat]`.\n\n##### `captureScroll` (Boolean)\n\n- default: `false`\n\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` (Boolean)\n\n- default: `true`\n\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. Automatically true if `draggable` is `true`.\n\n##### `captureClick` (Boolean)\n\n- default: `true`\n\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` (Boolean)\n\n- default: `true`\n\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n## Styling\n\nLike its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page.\n\n## Source\n\n[marker.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/marker.js)\n\n","slug":"docs/api-reference/marker","title":"Marker Control"},{"excerpt":"Popup Control Since v3.0 This is a React equivalent of Mapbox's Popup Control, which can be used to\nshow tooltip popups with custom HTML…","rawMarkdownBody":"# Popup Control\n\n![Since v3.0](https://img.shields.io/badge/since-v3.0-green)\n\nThis is a React equivalent of Mapbox's [Popup Control](https://www.mapbox.com/mapbox-gl-js/api/#popup), which can be used to\nshow tooltip popups with custom HTML content at specific locations on the map.\n\n```js\nimport {Component} from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\n\nclass Map extends Component {\n  state = {\n    showPopup: true\n  };\n\n  render() {\n    const {showPopup} = this.state;\n    return (\n      <ReactMapGL latitude={37.78} longitude={-122.41} zoom={8}>\n        {showPopup && <Popup\n          latitude={37.78}\n          longitude={-122.41}\n          closeButton={true}\n          closeOnClick={false}\n          onClose={() => this.setState({showPopup: false})}\n          anchor=\"top\" >\n          <div>You are here</div>\n        </Popup>}\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\n##### `latitude` (Number, required)\n\nLatitude of the anchor.\n\n##### `longitude` (Number, required)\n\nLongitude of the anchor.\n\n##### `altitude` (Number)\n\n- default: `0`\n\nAltitude of the anchor.\n\n##### `offsetLeft` (Number)\n\n- default: `0`\n\nOffset of the anchor from the left in pixels, negative number indicates left.\n\n##### `offsetTop` (Number)\n\n- default: `0`\n\nOffset of the anchor from the top in pixels, negative number indicates up.\n\n##### `closeButton` (Boolean)\n\n- default: `true`\n\nIf `true`, a close button will appear in the top right corner of the popup.\n\n##### `closeOnClick` (Boolean)\n\n- default: `true`\n\nIf `true`, the popup will closed when the map is clicked.\n\n##### `tipSize` (Number)\n\n- default: `10`\n\nSize of the tip pointing to the coordinate.\n\n##### `anchor` (String)\n\n- default: `bottom`\n\nA string indicating the popup's position relative to the coordinate.\nOptions are `top`, `bottom`, `left`, `right`, `top-left`, `top-right`, `bottom-left`, and `bottom-right`.\n\n##### `dynamicPosition` (Boolean)\n\n- default: `true`\n\nIf `true`, the anchor will be dynamically adjusted to ensure the popup falls within the map container.\n\n##### `sortByDepth` (Boolean)\n\n- default: `false`\n\nIf `true`, the order of the popups will be dynamically rearranged to ensure that the ones anchored closer to the camera are rendered on top. Useful when showing multiple popups in a tilted map.\n\n##### `onClose` (Function)\n\nCallback when the user closes the popup.\n\n##### `captureScroll` (Boolean)\n\n- default: `false`\n\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` (Boolean)\n\n- default: `true`\n\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged.\n\n##### `captureClick` (Boolean)\n\n- default: `true`\n\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` (Boolean)\n\n- default: `true`\n\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n\n## Styling\n\nLike its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page.\n\n## Source\n\n[popup.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/popup.js)\n\n","slug":"docs/api-reference/popup","title":"Popup Control"},{"excerpt":"Source Since v5.1 This component allows apps to create a map source using React. It may contain Layer components as children. Properties The…","rawMarkdownBody":"# Source\n\n![Since v5.1](https://img.shields.io/badge/since-v5.1-green)\n\nThis component allows apps to create a [map source](https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources) using React. It may contain [Layer](/docs/api-reference/layer.md) components as children.\n\n```js\nimport * as React from 'react';\nimport ReactMapGL, {Source, Layer} from 'react-map-gl';\n\nconst geojson = {\n  type: 'FeatureCollection',\n  features: [\n    {type: 'Feature', geometry: {type: 'Point', coordinates: [-122.4, 37.8]}}\n  ]\n};\n\nclass Map extends React.Component {\n  render() {\n    return (\n      <ReactMapGL latitude={37.78} longitude={-122.41} zoom={8}>\n        <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n          <Layer\n            id=\"point\"\n            type=\"circle\"\n            paint={{\n              'circle-radius': 10,\n              'circle-color': '#007cbf'\n            }} />\n        </Source>\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\nThe props provided to this component should be conforming to the [Mapbox source specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources)or [CanvasSourceOptions](https://docs.mapbox.com/mapbox-gl-js/api/#canvassourceoptions).\n\nWhen props change *shallowly*, the component will attempt to update the source. Do not define objects/arrays inline to avoid perf hit.\n\nOnce a `<Source>` is mounted, the following props should not change. If add/remove multiple JSX sources dynamically, make sure you use React's [key prop](https://reactjs.org/docs/lists-and-keys.html#keys) to give each element a stable identity.\n\n##### `id` (String)\n\nUnique identifier of the source. If not provided, a default id will be assigned.\n\n##### `type` (String, required)\n\nType of the source.\n\n## Source\n\n[source.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/source.js)\n","slug":"docs/api-reference/source","title":"Source"},{"excerpt":"WebMercatorViewport The  class takes map camera states (, , , ,  etc.),\nand performs projections between world and screen coordinates…","rawMarkdownBody":"# WebMercatorViewport\n\nThe `WebMercatorViewport` class takes map camera states (`latitude`, `longitude`, `zoom`, `pitch`, `bearing` etc.),\nand performs projections between world and screen coordinates.\n\n\n## Constructor\n\n| Parameter     |  Type    | Default | Description                                                |\n| ------------- | -------- | ------- | ---------------------------------------------------------- |\n| `width`       | `Number` | `1`       | Width of viewport |\n| `height`      | `Number` | `1`       | Height of viewport |\n| `latitude`    | `Number` | `0`      | Latitude of viewport center  |\n| `longitude`   | `Number` | `0`    | Longitude of viewport center  |\n| `zoom`        | `Number` | `11`      | Map zoom (scale is calculated as `2^zoom`) |\n| `pitch`       | `Number` | `0`       | The pitch (tilt) of the map from the screen, in degrees (0 is straight down) |\n| `bearing`     | `Number` | `0`       | The bearing (rotation) of the map from north, in degrees counter-clockwise (0 means north is up) |\n| `altitude`    | `Number` | `1.5`     | Altitude of camera in screen units  |\n\n\nRemarks:\n - Altitude has a default value that matches assumptions in mapbox-gl\n - `width` and `height` are forced to 1 if supplied as 0, to avoid\n   division by zero. This is intended to reduce the burden of apps to\n   to check values before instantiating a `Viewport`.\n -  When using Mercator projection, per cartographic tradition, longitudes and\n   latitudes are specified as degrees.\n\n\n## Methods\n\n##### `project(lngLatZ, opts)`\n\nProjects latitude and longitude to pixel coordinates on screen.\n\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `lngLatZ`      | `Array`   | (required) | map coordinates, `[lng, lat]` or `[lng, lat, Z]` where `Z` is elevation in meters |\n| `opts`         | `Object`  | `{}`     | named options                   |\n| `opts.topLeft` | `Boolean` | `true`   | If `true` projected coords are top left, otherwise bottom left |\n\nReturns: `[x, y]` or `[x, y, z]` in pixels coordinates. `z` is pixel depth.\n- If input is `[lng, lat]`: returns `[x, y]`.\n- If input is `[lng, lat, Z]`: returns `[x, y, z]`.\n\nRemarks:\n* By default, returns top-left coordinates suitable for canvas/SVG type\n  rendering.\n\n\n##### `unproject(xyz, opts)`\n\nUnproject pixel coordinates on screen to longitude and latitude on map.\n\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `xyz`          | `Array`   | (required) | pixel coordinates, `[x, y]` or `[x, y, z]` where `z` is pixel depth   |\n| `opts`         | `Object`  | `{}`     | named options                   |\n| `opts.topLeft` | `Boolean` | `true`   | If `true` projected coords are top left, otherwise bottom left |\n| `opts.targetZ` | `Number`  | `0`      | If pixel depth `z` is not specified in `xyz`, use `opts.targetZ` as the desired elevation |\n\nReturns: `[lng, lat]` or `[longitude, lat, Z]` in map coordinates. `Z` is elevation in meters.\n- If input is `[x, y]` without specifying `opts.targetZ`: returns `[lng, lat]`.\n- If input is `[x, y]` with `opts.targetZ`: returns `[lng, lat, targetZ]`.\n- If input is `[x, y, z]`: returns `[lng, lat, Z]`.\n\n\n##### `projectFlat(lngLat, scale)`\n\nProject longitude and latitude onto Web Mercator coordinates.\n\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `lngLat`          | `Array`   | (required) | map coordinates, `[lng, lat]`   |\n| `scale`         | `Number`  | `this.scale`     | Web Mercator scale  |\n\nReturns:\n\n - `[x, y]`, representing Web Mercator coordinates.\n\n##### `unprojectFlat(xy, scale)`\n\nUnprojects a Web Mercator coordinate to longitude and latitude.\n| Parameter      | Type      | Default  | Description                     |\n| -------------- | --------- | -------- | ------------------------------- |\n| `xy`          | `Array`   | (required) | Web Mercator coordinates, `[x, y]`   |\n| `scale`         | `Number`  | `this.scale`     | Web Mercator scale  |\n\nReturns:\n\n - `[longitude, latitude]`\n\n\n##### `fitBounds(bounds, options)`\n\nGet a new flat viewport that fits around the given bounding box.\n\n* `bounds` ([[Number,Number],[Number,Number]]) - an array of two opposite corners of\nthe bounding box. Each corner is specified in `[lon, lat]`.\n* `options` (Object)\n  + `options.padding` (Number|{top:Number, bottom: Number, left: Number, right: Number}, optional) - The amount of\n  padding in pixels to add to the given bounds from the edge of the viewport. If padding is set as object, all parameters are\n  required.\n  + `options.offset` ([Number,Number], optional) - The center of the given bounds relative to the viewport's center, `[x, y]` measured in pixels.\n\n\n##### `getMapCenterByLngLatPosition(opts)`\n\nReturns the map center that place a given [lng, lat] coordinate at screen point [x, y].\n\nParameters:\n- `opts` (Object) - options\n- `opts.lngLat` (Array, required) - [lng,lat] coordinates of a location on the sphere.\n- `opts.pos` (Array, required) - [x,y] coordinates of a pixel on screen.\n\nReturns:\n- `[longitude, latitude]` new map center\n\n","slug":"docs/api-reference/web-mercator-viewport","title":"WebMercatorViewport"},{"excerpt":"StaticMap Since v3.0 The simplest  wrapper around . This is designed to be completely\nstatic, and should be used to render a map with no…","rawMarkdownBody":"# StaticMap\n\n![Since v3.0](https://img.shields.io/badge/since-v3.0-green)\n\nThe simplest `React` wrapper around `MapboxGL`. This is designed to be completely\nstatic, and should be used to render a map with no interactivity. For a component\nthat supports full user interactivity, see [InteractiveMap](/docs/api-reference/interactive-map.md).\n\n```js\nimport {Component} from 'react';\nimport {StaticMap} from 'react-map-gl';\n\nclass Map extends Component {\n  render() {\n    return (\n      <StaticMap\n        width={400}\n        height={400}\n        latitude={37.7577}\n        longitude={-122.4376}\n        zoom={8} />\n    );\n  }\n}\n```\n\n## Properties\n\n### Initialization\n\nThe following props are used during the creation of the Mapbox map.\n\n##### `attributionControl` (Boolean)\n\n- default: `true`\n\nEquivalent to Mapbox's `attributionControl` [option](https://www.mapbox.com/mapbox-gl-js/api/#map). If `true`, shows Mapbox's attribution control.\n\n##### `disableTokenWarning` (Boolean)\n\n- default: `false`\n\nIf the provided API access token is rejected by Mapbox, `StaticMap` renders a warning instead of failing silently. If you know what you are doing and want to hide this warning anyways, set this prop to `true`.\n\n##### `gl` (WebGLContext)\n\n> This prop is experimental.\n\nUse an existing WebGLContext instead of creating a new one. This allows multiple libraries to render into a shared buffer. Use with caution.\n\n##### `mapboxApiAccessToken` (String)\n\nMapbox API access token for `MapboxGL`. Required when using Mapbox vector tiles/styles\nMapbox WebGL context creation option. Useful when you want to export the canvas as a PNG\n\n##### `mapboxApiUrl` (String)\n\n- default: `https://api.mapbox.com`\n\nEnables the use of private and country specific servers Mapbox servers, e.g. https://api.mapbox.cn/.\n\n##### `mapOptions` (Object)\n\n- default: `{}`\n\n> Non-public API, see https://github.com/visgl/react-map-gl/issues/545\n\nAn object of additional options to be passed to Mapbox's [`Map` constructor](https://www.mapbox.com/mapbox-gl-js/api/#map). Options specified here\nwill take precedence over those same options if set via props.\n\n##### `preserveDrawingBuffer` (Boolean)\n\n- default: `false`\n\nEquivalent to Mapbox's `preserveDrawingBuffer` [option](https://www.mapbox.com/mapbox-gl-js/api/#map). If `true`, the map's canvas can be exported to a PNG using `map.getCanvas().toDataURL()`.\n\n##### `preventStyleDiffing` (Boolean)\n\n- default: `false`\n\nIf `mapStyle` is assigned an Immutable object, when the prop changes, `StaticMap` can diff between the two values and call the appropriate Mapbox API such as `addLayer`, `removeLayer`, `setStyle`, `setData`, etc.\nThis allows apps to update data sources and layer styles efficiently. In use cases such as animation or dynamic showing/hiding layers, style diffing prevents the map from reloading and flickering when the map style changes.\n\nThere are known issues with style diffing. As stopgap, use this option to prevent style diffing.\n\n##### `reuseMaps` (Boolean)\n\n- default: `false`\n\n> This prop is experimental.\n\nIf `true`, when the map component is unmounted, instead of calling `remove` on the Mapbox map instance, save it for later reuse. This will avoid repeatedly creating new Mapbox map instances if possible.\n\nApplications that frequently mount and unmount maps may try this prop to help work around a mapbox-gl resource leak issue that can lead to a browser crash in certain situations.\n\n##### `transformRequest` (Function)\n\n- default: `null`\n\nA callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\nExpected to return an object with a `url` property and optionally `headers` and `credentials` properties.  Equivalent to Mapbox's `transformRequest` [map option](https://www.mapbox.com/mapbox-gl-js/api#map).\n\n\n### Map State\n\n##### `mapStyle` (String | Object | Immutable.Map)\n\n- default: `'mapbox://styles/mapbox/light-v8'`\n\nThe Mapbox style. A string url or a\n[MapboxGL style](https://www.mapbox.com/mapbox-gl-style-spec/#layer-interactive)\nobject (regular JS object or Immutable.Map).\n\nWhenever the `mapStyle` prop changes, the component will attempt to update the style of the underlying Mapbox map. The behavior can be further customized with the `preventStyleDiffing` prop.\n\n`mapStyle` is ignored when explicitly set to `null`.\n\n##### `width` (Number | String, required)\n\nThe width of the map. Can be either a number in pixels, or a valid CSS string.\n\n##### `height` (Number | String, required)\n\nThe height of the map. Can be either a number in pixels, or a valid CSS string.\n\n##### `latitude` (Number)\n\nThe latitude of the center of the map, as a top level prop. Only used if `viewState` is not supplied.\n\n##### `longitude` (Number)\n\nThe longitude of the center of the map, as a top level prop. Only used if `viewState` is not supplied.\n\n##### `zoom` (Number)\n\nThe tile zoom level of the map, as a top level prop. Only used if `viewState` is not supplied.\n\nBounded implicitly by default `minZoom` and `maxZoom` of `MapboxGL`\n\n##### `bearing` (Number)\n\n- default: `0`\n\nSpecify the bearing of the viewport, as a top level prop. Only used if `viewState` is not supplied.\n\n##### `pitch` (Number)\n\n- default: `0`\n\nSpecify the pitch of the viewport, as a top level prop. Only used if `viewState` is not supplied..\n\n##### `altitude` (Number)\n\n- default: `1.5`\n\n> Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137.\n\nAltitude of the viewport camera, relative to screen height.\n\n##### `viewState` (Object)\n\nAn object containing the view state of the map specified by the following fields:\n* `latitude` (Number) - The latitude of the center of the map.\n* `longitude` (Number) - The longitude of the center of the map.\n* `zoom` (Number) - The tile zoom level of the map. Bounded implicitly by default `minZoom` and `maxZoom` of `MapboxGL`.\n* `bearing` (Number) - default: `0` - The bearing of the viewport.\n* `pitch` (Number) - default: `0` - The pitch of the viewport.\n* `altitude` (Number) - default: `1.5 screen heights`\n\nNote: Either the `viewState`, or the `latitude`, `longitude` and `zoom` properties need to be specified.\n\n\n### Render Options\n\n##### `asyncRender` (Boolean)\n\n- default: `false`\n\nIf `true`, let Mapbox manage its own render cycle. This is the behavior prior to v4.1.\n\nIf `false`, force Mapbox canvas to redraw with DOM updates. This will make the map synchronize better with other controls during prop-driven viewport changes.\n\n##### `style` (Object)\n\nThe CSS style of the map container.\n\n##### `visible` (Boolean)\n\n- default: `true`\n\nWhether the map is visible. Unmounting and re-mounting a Mapbox instance is known to be costly. This option offers a way to hide a map using CSS style.\n\n##### `visibilityConstraints` (Object)\n\nAn object that specifies bounds for viewport props with `min*`, `max*` keys. If the viewport props are outside of these constraints, the Mapbox map is automatically hidden.\n\nDefault: `{ minZoom: 0, maxZoom: 20, minPitch: 0, maxPitch: 60 }`\n\n\n### Callbacks\n\n##### `onLoad` (Function)\n\n- default: `() => {}`\n\nA callback run when the map emits a `load` event. [Mapbox docs](https://www.mapbox.com/mapbox-gl-js/api#map.event:load)\n\n##### `onResize` (Function)\n\n- default: `() => {}`\n\nA callback run when the map size has changed.\n\n##### `onError` (Function)\n\n- default: `console.error`\n\nA callback run when the map emits an `error` event. [Mapbox docs](https://www.mapbox.com/mapbox-gl-js/api#map.event:error)\n\n\n## Methods\n\n##### `getMap`\n\nReturns the Mapbox instance if initialized. The `Map` instance will have full access to [MapboxGL's API](https://www.mapbox.com/mapbox-gl-js/api/#map).\n\n`getMap()`\n\n##### `queryRenderedFeatures`\n\nUse Mapbox's `queryRenderedFeatures` API to find features at point or in a bounding box. If the `parameters` argument is not specified, only queries the layers with the `interactive` property in the layer style.\n\n`queryRenderedFeatures(geometry, parameters)`\n\n- `geometry` {`[Number, Number` | `[[Number, Number, [Number, Number` - Point or an array of two points defining the bounding box. Coordinates in pixels.\n- `parameters` - Query options. For more details, see [Mapbox API documentation](https://www.mapbox.com/mapbox-gl-js/api/#Map#queryRenderedFeatures).\n\n\n## FAQ\n\n##### Where is `fitBounds`?\n\nYou can use the `WebMercatorViewport` utility to find the target viewport that fits around a lngLat bounding box:\n\n```js\nimport {WebMercatorViewport} from 'react-map-gl';\n\nconst viewport = new WebMercatorViewport({width: 800, height: 600})\n    .fitBounds([[-122.4, 37.7], [-122.5, 37.8]], {\n      padding: 20,\n      offset: [0, -100]\n    });\n\n/* viewport is a WebMercatorViewport instance, containing these fields:\n    latitude: 37.75001689223574,\n    longitude: -122.44999999999976,\n    zoom: 10.966817190981073,\n    pitch: 0,\n    bearing: 0,\n    ...\n */\n```\n\n[Documentation of WebMercatorViewport](docs/api-reference/web-mercator-viewport.md)\n\n\n## Source\n\n[static-map.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/static-map.js)\n","slug":"docs/api-reference/static-map","title":"StaticMap"},{"excerpt":"SVG Overlay Allows applications to overlay data on top of maps using a SVG container. Properties  (Function) Called every time the map…","rawMarkdownBody":"# SVG Overlay\n\nAllows applications to overlay data on top of maps using a SVG container.\n\n## Properties\n\n##### `redraw` (Function)\n\nCalled every time the map updates.\n\nParameters:\n- `width` (Number) - width of the viewport\n- `height` (Number) - height of the viewport\n- `project` (Function) - get screen position `[x, y]` from geo coordinates `[lng, lat]`\n- `unproject` (Function) - get geo coordinates `[lng, lat]` from screen position `[x, y]`\n\n### `style` (Object)\n\nAdditional css styles of the `svg` container.\n\n##### `captureScroll` (Boolean)\n\n- default: `false`\n\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` (Boolean)\n\n- default: `false`\n\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged.\n\n##### `captureClick` (Boolean)\n\n- default: `false`\n\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` (Boolean)\n\n- default: `false`\n\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n## Source\n\n[svg-overlay.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/overlays/svg-overlay.js)\n","slug":"docs/api-reference/svg-overlay","title":"SVG Overlay"},{"excerpt":"Custom Components Marker,\nPopup, and\nNavigationControl\nall extend the  React component. You may also create your own map control components…","rawMarkdownBody":"# Custom Components\n\n[Marker](/docs/api-reference/marker.md),\n[Popup](/docs/api-reference/popup.md), and\n[NavigationControl](/docs/api-reference/navigation-control.md)\nall extend the `BaseControl` React component. You may also create your own map control components.\n\n## Example\n\nThe following component renders a label \"(longitude, latitude)\" at the given coordinate:\n\n```js\nimport * as React from 'react';\nimport {BaseControl} from 'react-map-gl';\n\nclass CustomMarker extends BaseControl {\n  _render() {\n    const {longitude, latitude} = this.props;\n\n    const [x, y] = this._context.viewport.project([longitude, latitude]);\n\n    const markerStyle = {\n      position: 'absolute',\n      background: '#fff',\n      left: x,\n      top: y\n    };\n\n    return (\n      <div ref={this._containerRef}\n        style={markerStyle} >\n        ({longitude}, {latitude})\n      </div>\n    );\n  }\n}\n```\n\n## Properties\n\nThe following properties are handled by the `BaseControl` component:\n\n##### `captureScroll` {Boolean} - default: `false`\nStop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled.\n\n##### `captureDrag` {Boolean} - default: `true`\nStop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged.\n\n##### `captureClick` {Boolean} - default: `true`\nStop propagation of click event to the map component. Can be used to stop map from calling the `onClick` callback when this component is clicked.\n\n##### `captureDoubleClick` {Boolean} - default: `true`\nStop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked.\n\n## Private Members\n\n##### `_containerRef`\n\nA React [ref](https://reactjs.org/docs/refs-and-the-dom.html#creating-refs) object.\n\nShould be assigned to the `ref` prop of the root DOM element of this component. Required to leverage the `capture*` props.\n\n##### `_context`\n\nAn object containing the following fields:\n\n- `viewport` {WebMercatorViewport} - the current viewport\n- `map` {mapboxgl.Map} - the Mapbox map instance\n- `eventManager` {EventManager} - the event manager. Only available if using `InteractiveMap`.\n- `isDragging` {Bool} - whether the map is being dragged. Only available if using `InteractiveMap`.\n\n\n## Private Methods\n\n##### `_render`\n\nImplement this method to render the content of this component. `this._context` is accessible when this method is called.\n\n\n## Source\n[base-control.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/base-control.js)\n","slug":"docs/advanced/custom-components","title":"Custom Components"},{"excerpt":"Custom Overlays Because overlays are regular React components, it's straightforward to create\nresuable overlays that others can include into…","rawMarkdownBody":"# Custom Overlays\n\nBecause overlays are regular React components, it's straightforward to create\nresuable overlays that others can include into their project. Overlays can access\nthe current viewport through the React [context](https://facebook.github.io/react/docs/context.html):\n\n```js\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {BaseControl} from 'react-map-gl';\n\nclass MyCustomOverlay extends BaseControl {\n  // Instead of implementing render(), implement _render()\n  _render() {\n    const {viewport} = this._context;\n    // draw something\n    // _containerRef registers event listeners for map interactions\n    return <div ref={this._containerRef} />;\n  }\n}\n```\n\nHere's an example of using the [ScatterplotOverlay](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/additional-overlays/src/scatterplot-overlay.js):\n\n```jsx\n<MapGL {...viewport} mapStyle={mapStyle}>\n    <ScatterplotOverlay\n      locations={this.state.locations}\n      dotRadius={1}\n      globalOpacity={0.8}\n      compositeOperation=\"lighter\"\n      dotFill=\"blue\"\n      renderWhileDragging={true}\n    />\n</MapGL>\n```\n\nThere are more examples in the [examples/additional-overlays](https://github.com/visgl/react-map-gl/tree/5.2-release/examples/additional-overlays) folder of this repo.\n","slug":"docs/advanced/custom-overlays","title":"Custom Overlays"},{"excerpt":"Custom Map Controller Overriding The Default Map Controller To change the default behavior of map interaction, you can provide a custom map…","rawMarkdownBody":"# Custom Map Controller\n\n## Overriding The Default Map Controller\n\nTo change the default behavior of map interaction, you can provide a custom map control to the `controller` prop of `InteractiveMap`.\n\nThis custom map control must offer the following interface:\n- `setOptions(options)` - called by `InteractiveMap` when props change.\n\n```jsx\n  const mapController = new MyMapController();\n\n  render() {\n    return <ReactMapGL controller={mapController} ... />;\n  }\n```\n\n\nDocumentation of [the MapController class](/docs/api-reference/map-controller.md).\n\n\n## Examples\n\nA simple example to swap drag pan and drag rotate:\n\n```js\n  /// my-map-controller.js\n  import {MapController} from 'react-map-gl';\n\n  export default class MyMapController extends MapController {\n\n    _onPan(event) {\n      return this.isFunctionKeyPressed(event) || event.rightButton ?\n    //  Default implementation in MapController\n    //  this._onPanRotate(event) : this._onPanMove(event);\n        this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }\n```\n\nOverwrite existing event handling:\n\n```js\n  /// my-map-controller.js\n  import {MapController} from 'react-map-gl';\n\n  export default class MyMapController extends MapController {\n\n    // Override the default double tap handler\n    _onDoubleTap(event) {\n      // Go to New York City\n      this.updateViewport(this.getMapState(), {\n        longitude: -74.0,\n        latitude: 40.7,\n        zoom: 10\n      });\n    }\n  }\n```\n\nListen to additional events:\n\n```js\n  /// my-map-controller.js\n  import {MapController} from 'react-map-gl';\n\n  export default class MyMapController extends MapController {\n\n    constructor() {\n      super();\n      // subscribe to additional events\n      this.events = ['click'];\n    }\n\n    // Override the default handler in MapController\n    handleEvent(event) {\n      if (event.type === 'click') {\n        console.log('hi');\n      }\n      return super.handleEvent(event);\n    }\n  }\n```\n\nAdd a custom callback:\n\n```js\n  /// my-map-controller.js\n  import {MapController} from 'react-map-gl';\n\n  export default class MyMapController extends MapController {\n\n    setOptions(options) {\n      super.setOptions(options);\n      // save the custom callback\n      this.onRotate = options.onRotate;\n    }\n\n    _onPanRotate(event) {\n      super._onPanRotate(event);\n      this.onRotate();\n    }\n  }\n```\n\n","slug":"docs/advanced/custom-map-controller","title":"Custom Map Controller"},{"excerpt":"Scale Control Since v5.2 This is a React equivalent of Mapbox's ScaleControl. Properties  (Number) default:  The maximum length of the scale…","rawMarkdownBody":"# Scale Control\n\n![Since v5.2](https://img.shields.io/badge/since-v5.2-green)\n\nThis is a React equivalent of Mapbox's [ScaleControl](https://docs.mapbox.com/mapbox-gl-js/api/#scalecontrol).\n\n```js\nimport {Component} from 'react';\nimport ReactMapGL, {ScaleControl} from 'react-map-gl';\n\nclass Map extends Component {\n  render() {\n    const {viewport, updateViewport} = this.props;\n    return (\n      <ReactMapGL {...viewport} onViewportChange={updateViewport}>\n        <div style={{position: 'absolute', bottom: 100, left: 20}}>\n          <ScaleControl maxWidth={100} unit={\"metric\"}/>\n        </div>\n      </ReactMapGL>\n    );\n  }\n}\n```\n\n## Properties\n\n##### `maxWidth` (Number)\n\n- default: `100`\n\nThe maximum length of the scale control in pixels.\n\n##### `unit` (String)\n\n- default: `'metric'`\n\nUnit of the distance, one of `'imperial'`, `'metric'` or `'nautical'`.\n\n## Styling\n\nLike its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page.\n\n## Source\n\n[scale-control.js](https://github.com/visgl/react-map-gl/tree/5.2-release/src/components/scale-control.js)\n","slug":"docs/api-reference/scale-control","title":"Scale Control"},{"excerpt":"Viewport Transition  does not expose the transition API from  since it is designed to be a stateless component, and needs to synchronize…","rawMarkdownBody":"# Viewport Transition\n\n`react-map-gl` does not expose the transition API from `mapbox-gl-js` since it is designed to be a stateless component, and needs to synchronize with separate overlay systems such as deck.gl.\n\nInstead, transitions can be defined using [InteractiveMap](/docs/api-reference/interactive-map.md)'s transition props.\n\n## Example: Fly to a New Location\n\n```jsx\nimport ReactMapGL, {LinearInterpolator, FlyToInterpolator} from 'react-map-gl';\n// 3rd-party easing functions\nimport d3 from 'd3-ease';\n\nclass MyApp extends React.Component {\n    state = {\n        viewport: {\n            width: 800,\n            height: 600,\n            longitude: -122.45,\n            latitude: 37.78,\n            zoom: 14\n        }\n    };\n\n    _onViewportChange = viewport => {\n        this.setState({viewport});\n    };\n\n    _goToNYC = () => {\n        const viewport = {\n            ...this.state.viewport,\n            longitude: -74.1,\n            latitude: 40.7,\n            zoom: 14,\n            transitionDuration: 5000,\n            transitionInterpolator: new FlyToInterpolator(),\n            transitionEasing: d3.easeCubic\n        };\n        this.setState({viewport});\n    };\n\n    render() {\n        return (\n            <div>\n                <ReactMapGL {...this.state.viewport} onViewportChange={this._onViewportChange} />\n                <button onClick={this._goToNYC}>New York City</button>\n            </div>\n        );\n    }\n}\n```\n\nSee [viewport animation](#examples/viewport-animation) for a complete example.\n\n\n## Example: Transition Viewport To A Bounding Box\n\nYou can use the `WebMercatorViewport` utility to find the target viewport that fits around a lngLat bounding box:\n\n```js\nimport {WebMercatorViewport} from 'react-map-gl';\n```\n\n```js\n    _goToSF = () => {\n        const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n            .fitBounds([[-122.4, 37.7], [-122.5, 37.8]], {\n              padding: 20,\n              offset: [0, -100]\n            });\n        const viewport = {\n            ...this.state.viewport,\n            longitude,\n            latitude,\n            zoom,\n            transitionDuration: 5000,\n            transitionInterpolator: new FlyToInterpolator(),\n            transitionEasing: d3.easeCubic\n        }\n        this.setState({viewport});\n    };\n```\n\n[Documentation of WebMercatorViewport](https://uber.github.io/react-map-gl/#/documentation/api-reference/web-mercator-viewport)\n\n\n## Controlling Map Transitions\n\n### InteractiveMap's Transition Props\n\nSee properties of [InteractiveMap](/docs/api-reference/interactive-map.md##transitions).\n\n- `transitionDuration` (Number)\n- `transitionInterpolator` (Object)\n- `transitionEasing` (Function)\n- `transitionInterruption` (Number)\n- `onTransitionStart` (Function)\n- `onTransitionInterrupt` (Function)\n- `onTransitionEnd` (Function)\n\n\n### Transition and the onViewportChange Callback\n\n`InteractiveMap` is designed to be a stateless component. For transitions to work, the application must update the viewport props returned by the `onViewportChange` callback:\n\n```js\n<ReactMapGL\n    {...this.state.viewport}\n    onViewportChange={(viewport) => this.setState({viewport})}\n```\n\nRemarks:\n- The props returned by the callback may contain transition properties. For example, during panning and rotating, the callback is invoked with `transitionDuration: 0`, meaning that the map movement instantly matches the change of the pointer. When panning or zooming with keyboard, the callback is invoked with a 300ms linear transition.\n- It is recommended that when programatically triggering a transition, always explicitly set the transition properties (interpolator, easing and duration).\n- \"Set and forget\": the values of the following props at the start of a transition carry through the entire duration of the transition:\n  + `transitionDuration`\n  + `transitionInterpolator`\n  + `transitionEasing`\n  + `transitionInterruption`\n- The default interaction/transition behavior can always be intercepted and overwritten in the handler for `onViewportChange`. However, if a transition is in progress, the properties that are being transitioned (e.g. longitude and latitude) should not be manipulated, otherwise the change will be interpreted as an interruption of the transition.\n- When using `FlyToInterpolator` for `transitionInterpolator`, `transitionDuration` can be set to `'auto'` where actual duration is auto calculated based on start and end viewports and is linear to the distance between them. This duration can be further customized using `speed` parameter to `FlyToInterpolator` constructor.\n\n\n### Transition Interpolators\n\nA `TransitionInterpolator` instance must be supplied to the `transitionInterpolator` prop. It contains the following methods:\n\n- `arePropsEqual(currentProps, nextProps)` - called to determine if transition should be triggered when viewport props update.\n- `initiateProps(startProps, endProps)` - called before transition starts to pre-process the start and end viewport props.\n- `interpolateProps(startProps, endProps, t)` - called to get viewport props in transition. `t` is a time factor between `[0, 1]`.\n\nreact-map-gl offers two built-in interpolator classes:\n\n- [LinearInterpolator](/docs/api-reference/linear-interpolator.md)\n- [FlyToInterpolator](/docs/api-reference/fly-to-interpolator.md)\n","slug":"docs/advanced/viewport-transition","title":"Viewport Transition"}]}}}