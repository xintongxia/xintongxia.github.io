"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _events = _interopRequireDefault(require("events"));

var _document = _interopRequireDefault(require("global/document"));

var _window = _interopRequireDefault(require("global/window"));

var _core = require("@deck.gl/core");

var _deckDrawer = _interopRequireDefault(require("./deck-renderer/deck-drawer"));

var _layerMouseEvent = _interopRequireDefault(require("./layer-mouse-event"));

var _nebulaLayer = _interopRequireDefault(require("./nebula-layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LOGGER_PREFIX = 'Nebula: ';

var Nebula =
/*#__PURE__*/
function () {
  function Nebula() {
    var _this = this;

    _classCallCheck(this, Nebula);

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "deckgl", void 0);

    _defineProperty(this, "mainContainer", void 0);

    _defineProperty(this, "deckglMouseOverInfo", void 0);

    _defineProperty(this, "_deckDrawer", void 0);

    _defineProperty(this, "_mouseWasDown", void 0);

    _defineProperty(this, "wmViewport", void 0);

    _defineProperty(this, "queryObjectEvents", new _events.default());

    _defineProperty(this, "forceUpdate", void 0);

    _defineProperty(this, "inited", void 0);

    _defineProperty(this, "_onMouseEvent", function (event) {
      if (!_this._isNebulaEvent(event)) {
        return;
      }

      if (event.type === 'mousedown') {
        _this._mouseWasDown = true;
      } // offsetX/Y of the MouseEvent provides the offset in the X/Y coordinate
      // of the mouse pointer between that event and the padding edge of the target node.
      // We set our listener to document so we need to adjust offsetX/Y
      // in case the target is not be our WebGL canvas.


      var _ref = _this.mainContainer ? _this.mainContainer.getBoundingClientRect() : {},
          _ref$top = _ref.top,
          top = _ref$top === void 0 ? 0 : _ref$top,
          _ref$left = _ref.left,
          left = _ref$left === void 0 ? 0 : _ref$left;

      var proxyEvent = new Proxy(event, {
        get: function get(original, propertyName) {
          if (propertyName === 'offsetX') {
            return original.pageX - left;
          }

          if (propertyName === 'offsetY') {
            return original.pageY - top;
          } // TODO: Properly use pointer events


          if (propertyName === 'type') {
            return original.type.replace('pointer', 'mouse');
          }

          var result = original[propertyName];

          if (typeof result === 'function') {
            return result.bind(original);
          }

          return result;
        }
      });

      _this._handleDeckGLEvent(proxyEvent);
    });
  }

  _createClass(Nebula, [{
    key: "init",
    value: function init(props) {
      var _this2 = this;

      this.props = props;
      this.wmViewport = new _core.WebMercatorViewport(this.props.viewport); // TODO: Properly use pointer events: ['click', 'dblclick', 'pointermove', 'pointerup', 'pointerdown']

      ['click', 'dblclick', 'mousemove', 'mouseup', 'mousedown'].forEach(function (name) {
        return _document.default.addEventListener(name, _this2._onMouseEvent, true);
      });
    }
  }, {
    key: "detach",
    value: function detach() {
      var _this3 = this;

      // TODO: Properly use pointer events: ['click', 'dblclick', 'pointermove', 'pointerup', 'pointerdown']
      ['click', 'dblclick', 'mousemove', 'mouseup', 'mousedown'].forEach(function (name) {
        return _document.default.removeEventListener(name, _this3._onMouseEvent, true);
      });
    }
  }, {
    key: "updateProps",
    value: function updateProps(newProps) {
      this.props = newProps;
      var viewport = this.props.viewport;
      this.wmViewport = new _core.WebMercatorViewport(viewport);
    }
  }, {
    key: "log",
    value: function log(message) {
      var logger = this.props.logger;

      if (logger && logger.info) {
        logger.info(LOGGER_PREFIX + message);
      }
    }
  }, {
    key: "updateAllDeckObjects",
    value: function updateAllDeckObjects() {
      this.getAllLayers().forEach(function (layer) {
        if (layer && layer.deckCache) {
          layer.deckCache.updateAllDeckObjects();
        }
      });
      this.forceUpdate();
    }
  }, {
    key: "updateDeckObjectsByIds",
    value: function updateDeckObjectsByIds(ids) {
      this.getAllLayers().forEach(function (layer) {
        if (layer && layer.deckCache) {
          layer.deckCache.updateDeckObjectsByIds(ids);
        }
      });
      this.forceUpdate();
    }
  }, {
    key: "rerenderLayers",
    value: function rerenderLayers() {
      this.updateAllDeckObjects();
    }
  }, {
    key: "_isNebulaEvent",
    value: function _isNebulaEvent(_ref2) {
      var buttons = _ref2.buttons,
          target = _ref2.target,
          type = _ref2.type;
      var viewport = this.props.viewport; // allow mouseup event aggressively to cancel drag properly
      // TODO: use pointer capture setPointerCapture() to capture mouseup properly after deckgl

      if (this._mouseWasDown && type === 'mouseup') {
        this._mouseWasDown = false;
        return true;
      } // allow mousemove event while dragging


      if (type === 'mousemove' && buttons > 0) {
        return true;
      }

      if (!target.getBoundingClientRect) {
        return false;
      }

      var rect = target.getBoundingClientRect(); // Only listen to events coming from the basemap
      // identified by the canvas of the same size as viewport.
      // Need to round the rect dimension as some monitors
      // have some sub-pixel difference with viewport.

      return Math.round(rect.width) === Math.round(viewport.width) && Math.round(rect.height) === Math.round(viewport.height);
    }
  }, {
    key: "getMouseGroundPosition",
    value: function getMouseGroundPosition(event) {
      return this.wmViewport.unproject([event.offsetX, event.offsetY]);
    }
  }, {
    key: "unprojectMousePosition",
    value: function unprojectMousePosition(mousePosition) {
      return this.wmViewport.unproject(mousePosition);
    }
  }, {
    key: "_handleDeckGLEvent",
    value: function _handleDeckGLEvent(event) {
      var deckgl = this.deckgl,
          _this$props = this.props,
          onMapMouseEvent = _this$props.onMapMouseEvent,
          selectionType = _this$props.selectionType,
          eventFilter = _this$props.eventFilter;
      var sendMapEvent = true;
      var cursor = 'auto';

      if (event && deckgl && selectionType) {
        if (!this._deckDrawer) this._deckDrawer = new _deckDrawer.default(this);
        var lngLat = this.getMouseGroundPosition(event);
        if (eventFilter && !eventFilter(lngLat, event)) return;

        var drawerResult = this._deckDrawer.handleEvent(event, lngLat, selectionType);

        if (drawerResult.redraw) this.forceUpdate();
        return;
      }

      if (event && deckgl && (!event.buttons || event.type !== 'mousemove')) {
        // TODO: sort by mouse priority
        var layerIds = deckgl.props.layers.filter(function (l) {
          return l && l.props && l.props.nebulaLayer && l.props.nebulaLayer.enablePicking;
        }).map(function (l) {
          return l.id;
        });
        var pickingInfo = deckgl.pickObject({
          x: event.offsetX,
          y: event.offsetY,
          radius: 5,
          layerIds: layerIds
        });
        this.queryObjectEvents.emit('pick', {
          event: event,
          pickingInfo: pickingInfo
        });

        if (pickingInfo) {
          sendMapEvent = false;
          var index = pickingInfo.index,
              _lngLat = pickingInfo.lngLat;
          if (eventFilter && !eventFilter(_lngLat, event)) return;
          var deckLayer = pickingInfo.layer,
              object = pickingInfo.object;

          if (deckLayer && deckLayer.props && deckLayer.props.nebulaLayer && deckLayer.props.nebulaLayer.eventHandler) {
            deckLayer.props.nebulaLayer.eventHandler(event, pickingInfo);
          }

          var original = object.original || deckLayer.props.nebulaLayer && deckLayer.props.nebulaLayer.deckCache && deckLayer.props.nebulaLayer.deckCache.originals[index];

          if (original) {
            this.deckglMouseOverInfo = {
              originalLayer: deckLayer.props.nebulaLayer,
              index: index
            };
            var nebulaMouseEvent = new _layerMouseEvent.default(event, {
              data: original,
              metadata: object.metadata,
              groundPoint: _lngLat,
              nebula: this
            });
            deckLayer.props.nebulaLayer.emit(event.type, nebulaMouseEvent);
            this.forceUpdate();
          }

          cursor = 'pointer';
        }
      }

      if (_document.default.documentElement) {
        _document.default.documentElement.style.cursor = cursor;
      }

      if (sendMapEvent) {
        this.deckglMouseOverInfo = null;

        var _lngLat2 = this.getMouseGroundPosition(event);

        if (eventFilter && !eventFilter(_lngLat2, event)) return; // send to layers first

        var _nebulaMouseEvent = new _layerMouseEvent.default(event, {
          groundPoint: _lngLat2,
          nebula: this
        });

        this.getAllLayers().filter(function (layer) {
          return layer && layer.usesMapEvents;
        }).forEach(function (layer) {
          return layer.emit('mapMouseEvent', _nebulaMouseEvent);
        });
        this.getAllLayers().filter(function (layer) {
          return layer && layer.props && layer.props.nebulaLayer && layer.props.nebulaLayer.mapMouseEvent;
        }).forEach(function (layer) {
          return layer.props.nebulaLayer.mapMouseEvent(_nebulaMouseEvent, layer);
        });

        if (onMapMouseEvent) {
          onMapMouseEvent(event, _lngLat2);
        }
      }
    }
  }, {
    key: "getExtraDeckLayers",
    value: function getExtraDeckLayers() {
      var result = [];
      if (this._deckDrawer) result.push.apply(result, _toConsumableArray(this._deckDrawer.render()));
      return result;
    }
  }, {
    key: "renderDeckLayers",
    value: function renderDeckLayers() {
      var _this4 = this;

      return this.getAllLayers().map(function (layer) {
        return layer instanceof _nebulaLayer.default ? layer.render({
          nebula: _this4
        }) : layer;
      }).filter(Boolean);
    }
  }, {
    key: "getAllLayers",
    value: function getAllLayers() {
      var result = [];
      this.props.layers.filter(Boolean).forEach(function (layer) {
        result.push(layer); // Only NebulaLayers have helpers, Deck GL layers don't.

        if (layer instanceof _nebulaLayer.default) {
          result.push.apply(result, _toConsumableArray(layer.helperLayers));
        }
      });
      return result.filter(Boolean);
    }
  }, {
    key: "getRenderedLayers",
    value: function getRenderedLayers() {
      return _toConsumableArray(this.renderDeckLayers()).concat(_toConsumableArray(this.getExtraDeckLayers()));
    }
  }, {
    key: "updateAndGetRenderedLayers",
    value: function updateAndGetRenderedLayers(layers, viewport, container) {
      if (this.inited) {
        this.updateProps({
          layers: layers,
          viewport: viewport
        });

        this.forceUpdate = function () {
          return container.forceUpdate();
        };
      } else {
        this.inited = true;
        this.init({
          layers: layers,
          viewport: viewport
        });

        this.forceUpdate = function () {
          return container.forceUpdate();
        };

        this.updateAllDeckObjects();
      }

      return this.getRenderedLayers();
    }
  }, {
    key: "setDeck",
    value: function setDeck(deckgl) {
      if (deckgl) {
        this.deckgl = deckgl;
      }
    }
  }, {
    key: "setMainContainer",
    value: function setMainContainer(mainContainer) {
      if (mainContainer) {
        this.mainContainer = mainContainer;
      }
    }
  }]);

  return Nebula;
}();

exports.default = Nebula;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,