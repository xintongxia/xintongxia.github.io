"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SELECTION_TYPE = void 0;

var _layers = require("@deck.gl/layers");

var _helpers = require("@turf/helpers");

var _bbox = _interopRequireDefault(require("@turf/bbox"));

var _bboxPolygon = _interopRequireDefault(require("@turf/bbox-polygon"));

var _buffer = _interopRequireDefault(require("@turf/buffer"));

var _difference = _interopRequireDefault(require("@turf/difference"));

var _distance = _interopRequireDefault(require("@turf/distance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var POLYGON_LINE_COLOR = [0, 255, 0, 255];
var POLYGON_FILL_COLOR = [255, 255, 255, 90];
var POLYGON_LINE_WIDTH = 2;
var POLYGON_DASHES = [20, 20];
var POLYGON_THRESHOLD = 0.01;
var EXPANSION_KM = 10;
var LAYER_ID_VIEW = 'DeckDrawerView';
var LAYER_ID_PICK = 'DeckDrawerPick';
var SELECTION_TYPE = {
  NONE: null,
  RECTANGLE: 'rectangle',
  POLYGON: 'polygon'
};
exports.SELECTION_TYPE = SELECTION_TYPE;

var DeckDrawer =
/*#__PURE__*/
function () {
  function DeckDrawer(nebula) {
    _classCallCheck(this, DeckDrawer);

    _defineProperty(this, "nebula", void 0);

    _defineProperty(this, "usePolygon", void 0);

    _defineProperty(this, "validPolygon", void 0);

    _defineProperty(this, "landPoints", void 0);

    _defineProperty(this, "mousePoints", void 0);

    this.nebula = nebula;
    this.usePolygon = false;
    this.landPoints = [];
    this.mousePoints = [];
  }

  _createClass(DeckDrawer, [{
    key: "_getLayerIds",
    value: function _getLayerIds() {
      // TODO: sort by mouse priority
      return this.nebula.deckgl.props.layers.filter(function (l) {
        return l && l.props && l.props.nebulaLayer && l.props.nebulaLayer.enableSelection;
      }).map(function (l) {
        return l.id;
      });
    }
  }, {
    key: "_selectFromPickingInfos",
    value: function _selectFromPickingInfos(pickingInfos) {
      var objects = pickingInfos.map(function (_ref) {
        var layer = _ref.layer,
            index = _ref.index,
            object = _ref.object;
        return object.original || layer.props.nebulaLayer.deckCache.originals[index];
      });
      this.nebula.props.onSelection(objects);
    }
  }, {
    key: "_getBoundingBox",
    value: function _getBoundingBox() {
      var mousePoints = this.mousePoints;
      var allX = mousePoints.map(function (mousePoint) {
        return mousePoint[0];
      });
      var allY = mousePoints.map(function (mousePoint) {
        return mousePoint[1];
      });
      var x = Math.min.apply(Math, _toConsumableArray(allX));
      var y = Math.min.apply(Math, _toConsumableArray(allY));
      var maxX = Math.max.apply(Math, _toConsumableArray(allX));
      var maxY = Math.max.apply(Math, _toConsumableArray(allY));
      return {
        x: x,
        y: y,
        width: maxX - x,
        height: maxY - y
      };
    }
  }, {
    key: "_selectRectangleObjects",
    value: function _selectRectangleObjects() {
      if (this.landPoints.length !== 2) return;

      var _this$mousePoints$ = _slicedToArray(this.mousePoints[0], 2),
          x1 = _this$mousePoints$[0],
          y1 = _this$mousePoints$[1];

      var _this$mousePoints$2 = _slicedToArray(this.mousePoints[1], 2),
          x2 = _this$mousePoints$2[0],
          y2 = _this$mousePoints$2[1];

      var pickingInfos = this.nebula.deckgl.pickObjects({
        x: Math.min(x1, x2),
        y: Math.min(y1, y2),
        width: Math.abs(x2 - x1),
        height: Math.abs(y2 - y1),
        layerIds: this._getLayerIds()
      });

      this._selectFromPickingInfos(pickingInfos);
    }
  }, {
    key: "_selectPolygonObjects",
    value: function _selectPolygonObjects() {
      var pickingInfos = this.nebula.deckgl.pickObjects(_objectSpread({}, this._getBoundingBox(), {
        layerIds: [LAYER_ID_PICK].concat(_toConsumableArray(this._getLayerIds()))
      }));

      this._selectFromPickingInfos(pickingInfos.filter(function (item) {
        return item.layer.id !== LAYER_ID_PICK;
      }));
    }
  }, {
    key: "_getMousePosFromEvent",
    value: function _getMousePosFromEvent(event) {
      var offsetX = event.offsetX,
          offsetY = event.offsetY;
      return [offsetX, offsetY];
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(event, lngLat, selectionType) {
      // capture all events (mouse-up is needed to prevent us stuck in moving map)
      if (event.type !== 'mouseup') event.stopPropagation();
      this.usePolygon = selectionType === SELECTION_TYPE.POLYGON;
      var redraw = false;
      var deactivate = false;
      var usePolygon = this.usePolygon,
          landPoints = this.landPoints,
          mousePoints = this.mousePoints;

      if (event.type === 'mousedown') {
        if (usePolygon && landPoints.length) {
          // if landPoints.length is zero we want to insert two points (so we let it run the else)
          // also don't insert if polygon is invalid
          if (this.landPoints.length < 3 || this.validPolygon) {
            landPoints.push(lngLat);
            mousePoints.push(this._getMousePosFromEvent(event));
          }
        } else {
          this.landPoints = [lngLat, lngLat];

          var m = this._getMousePosFromEvent(event);

          this.mousePoints = [m, m];
        }

        redraw = true;
      } else if (event.type === 'mousemove' && landPoints.length) {
        // update last point
        landPoints[landPoints.length - 1] = lngLat;
        mousePoints[mousePoints.length - 1] = this._getMousePosFromEvent(event);
        redraw = true;
      } else if (event.type === 'mouseup') {
        if (usePolygon) {
          // check to see if completed
          // TODO: Maybe double-click to finish?
          if (landPoints.length > 4 && (0, _distance.default)(landPoints[0], landPoints[landPoints.length - 1]) < POLYGON_THRESHOLD && this.validPolygon) {
            this._selectPolygonObjects();

            this.reset();
            redraw = true;
            deactivate = true;
          }
        } else {
          this._selectRectangleObjects();

          this.reset();
          redraw = true;
          deactivate = true;
        }
      }

      return {
        redraw: redraw,
        deactivate: deactivate
      };
    }
  }, {
    key: "reset",
    value: function reset() {
      this.landPoints = [];
      this.mousePoints = [];
    }
  }, {
    key: "_makeStartPointHighlight",
    value: function _makeStartPointHighlight(center) {
      var buffer = (0, _buffer.default)((0, _helpers.point)(center), POLYGON_THRESHOLD / 4.0);
      return (0, _bboxPolygon.default)((0, _bbox.default)(buffer)).geometry.coordinates;
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var data = [];
      var dataPick = [];

      if (!this.usePolygon && this.landPoints.length === 2) {
        // Use mouse points instead of land points so we get the right shape
        var _this$mousePoints = _slicedToArray(this.mousePoints, 2),
            _this$mousePoints$3 = _slicedToArray(_this$mousePoints[0], 2),
            x1 = _this$mousePoints$3[0],
            y1 = _this$mousePoints$3[1],
            _this$mousePoints$4 = _slicedToArray(_this$mousePoints[1], 2),
            x2 = _this$mousePoints$4[0],
            y2 = _this$mousePoints$4[1];

        var selPolygon = [[x1, y1], [x1, y2], [x2, y2], [x2, y1], [x1, y1]].map(function (mousePos) {
          return _this.nebula.unprojectMousePosition(mousePos);
        });
        data.push({
          polygon: selPolygon,
          lineColor: POLYGON_LINE_COLOR,
          fillColor: POLYGON_FILL_COLOR
        });
      } else if (this.usePolygon && this.landPoints.length) {
        data.push({
          polygon: this.landPoints,
          lineColor: POLYGON_LINE_COLOR,
          fillColor: POLYGON_FILL_COLOR
        }); // Hack: use a polygon to hide the outside, because pickObjects()
        // does not support polygons

        if (this.landPoints.length >= 3) {
          var landPointsPoly = (0, _helpers.polygon)([_toConsumableArray(this.landPoints).concat([this.landPoints[0]])]);
          var bigBuffer = (0, _buffer.default)((0, _helpers.point)(this.landPoints[0]), EXPANSION_KM);
          var bigPolygon;

          try {
            // turfDifference throws an exception if the polygon
            // intersects with itself
            bigPolygon = (0, _difference.default)(bigBuffer, landPointsPoly);
            dataPick.push({
              polygon: bigPolygon.geometry.coordinates,
              fillColor: [0, 0, 0, 1]
            });
            this.validPolygon = true;
          } catch (e) {
            // invalid selection polygon
            this.validPolygon = false;
          }
        }
      }

      if (this.landPoints.length) {
        // highlight start point
        data.push({
          polygon: this._makeStartPointHighlight(this.landPoints[0]),
          lineColor: [0, 0, 0, 0],
          fillColor: POLYGON_LINE_COLOR
        });
      } // Hack to make the PolygonLayer() stay active,
      // otherwise it takes 3 seconds (!) to init!
      // TODO: fix this


      data.push({
        polygon: [[0, 0]]
      });
      dataPick.push({
        polygon: [[0, 0]]
      });
      return [new _layers.PolygonLayer({
        id: LAYER_ID_VIEW,
        data: data,
        fp64: false,
        opacity: 1.0,
        pickable: false,
        lineWidthMinPixels: POLYGON_LINE_WIDTH,
        lineWidthMaxPixels: POLYGON_LINE_WIDTH,
        lineDashJustified: true,
        getLineDashArray: function getLineDashArray(x) {
          return POLYGON_DASHES;
        },
        getLineColor: function getLineColor(obj) {
          return obj.lineColor || [0, 0, 0, 255];
        },
        getFillColor: function getFillColor(obj) {
          return obj.fillColor || [0, 0, 0, 255];
        },
        getPolygon: function getPolygon(o) {
          return o.polygon;
        }
      }), new _layers.PolygonLayer({
        id: LAYER_ID_PICK,
        data: dataPick,
        getLineColor: function getLineColor(obj) {
          return obj.lineColor || [0, 0, 0, 255];
        },
        getFillColor: function getFillColor(obj) {
          return obj.fillColor || [0, 0, 0, 255];
        },
        fp64: false,
        opacity: 1.0,
        stroked: false,
        pickable: true,
        getPolygon: function getPolygon(o) {
          return o.polygon;
        }
      })];
    }
  }]);

  return DeckDrawer;
}();

exports.default = DeckDrawer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,