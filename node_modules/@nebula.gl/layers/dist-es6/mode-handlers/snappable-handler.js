"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnappableHandler = void 0;

var _modeHandler = require("./mode-handler");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_SNAP_PIXELS = 5;

var SnappableHandler =
/*#__PURE__*/
function (_ModeHandler) {
  _inherits(SnappableHandler, _ModeHandler);

  function SnappableHandler(handler) {
    var _this;

    _classCallCheck(this, SnappableHandler);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SnappableHandler).call(this));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_handler", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_editHandlePicks", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_startDragSnapHandlePosition", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_isSnapped", void 0);

    _this._handler = handler;
    return _this;
  }

  _createClass(SnappableHandler, [{
    key: "setFeatureCollection",
    value: function setFeatureCollection(featureCollection) {
      this._handler.setFeatureCollection(featureCollection);
    }
  }, {
    key: "setModeConfig",
    value: function setModeConfig(modeConfig) {
      this._modeConfig = modeConfig;

      this._handler.setModeConfig(modeConfig);
    }
  }, {
    key: "setSelectedFeatureIndexes",
    value: function setSelectedFeatureIndexes(indexes) {
      this._handler.setSelectedFeatureIndexes(indexes);
    }
  }, {
    key: "setDeckGlContext",
    value: function setDeckGlContext(context) {
      _get(_getPrototypeOf(SnappableHandler.prototype), "setDeckGlContext", this).call(this, context);

      this._handler.setDeckGlContext(context);
    }
  }, {
    key: "_getSnappedMouseEvent",
    value: function _getSnappedMouseEvent(event, snapPoint) {
      return Object.assign({}, event, {
        groundCoords: snapPoint,
        screenCoords: this._context.viewport.project(snapPoint),
        pointerDownGroundCoords: this._startDragSnapHandlePosition
      });
    }
  }, {
    key: "_getEditHandleLayerId",
    value: function _getEditHandleLayerId() {
      // TODO: This is hacky, find a better way!
      var layers = this._context.layerManager.layers;
      var layer = layers.find(function (l) {
        return l.id.endsWith('-edit-handles');
      });
      return layer ? layer.id : '';
    }
  }, {
    key: "_getEditHandlePicks",
    value: function _getEditHandlePicks(event) {
      var screenCoords = event.screenCoords;

      var _ref = this._modeConfig || {},
          _ref$snapPixels = _ref.snapPixels,
          snapPixels = _ref$snapPixels === void 0 ? DEFAULT_SNAP_PIXELS : _ref$snapPixels;

      var picks = this._context.layerManager.pickObject({
        x: screenCoords[0],
        y: screenCoords[1],
        mode: 'query',
        layerIds: [this._getEditHandleLayerId()],
        radius: snapPixels,
        viewports: [this._context.viewport],
        depth: 2
      });

      var potentialSnapHandle = picks.find(function (pick) {
        return pick.object && pick.object.type === 'intermediate';
      });
      var handles = {
        potentialSnapHandle: potentialSnapHandle && potentialSnapHandle.object
      };
      var pickedHandle = (0, _modeHandler.getPickedEditHandle)(event.pointerDownPicks);

      if (pickedHandle) {
        return _objectSpread({}, handles, {
          pickedHandle: pickedHandle
        });
      }

      return handles;
    }
  }, {
    key: "_updatePickedHandlePosition",
    value: function _updatePickedHandlePosition(editAction) {
      var _ref2 = this._editHandlePicks || {},
          pickedHandle = _ref2.pickedHandle;

      if (pickedHandle && editAction) {
        var featureIndexes = editAction.featureIndexes,
            updatedData = editAction.updatedData;

        for (var i = 0; i < featureIndexes.length; i++) {
          var selectedIndex = featureIndexes[i];
          var updatedFeature = updatedData.features[selectedIndex];
          var positionIndexes = pickedHandle.positionIndexes,
              featureIndex = pickedHandle.featureIndex;

          if (selectedIndex >= 0 && featureIndex === selectedIndex) {
            var coordinates = updatedFeature.geometry.coordinates; // $FlowFixMe

            pickedHandle.position = positionIndexes.reduce(function (a, b) {
              return a[b];
            }, coordinates);
          }
        }
      }
    } // If layerIdsToSnapTo is present in modeConfig and is populated, this
    // method will return the features from the specified layers along with the features
    // that live in the current layer. Otherwise, this method will simply return the
    // features from the current layer

  }, {
    key: "_getFeaturesFromRelevantLayers",
    value: function _getFeaturesFromRelevantLayers() {
      var _this2 = this;

      var features = _toConsumableArray(this._handler.featureCollection.getObject().features);

      var _ref3 = this._modeConfig || {},
          layerIdsToSnapTo = _ref3.layerIdsToSnapTo;

      if (layerIdsToSnapTo && layerIdsToSnapTo.length) {
        var otherLayersToSnapTo = this._context.layerManager.layers.filter(function (layer) {
          var shouldPickFromLayer = layerIdsToSnapTo && layerIdsToSnapTo.includes(layer.id); // Filter out the current layer since the current layer's features are
          // already populated in the features array.

          return shouldPickFromLayer && layer.id !== _this2._layerId;
        });

        var featuresFromAdditionalLayers = otherLayersToSnapTo.map(function (otherLayer) {
          return otherLayer.props.data;
        }).reduce(function (a, b) {
          return _toConsumableArray(a).concat(_toConsumableArray(b));
        }, []);
        features.push.apply(features, _toConsumableArray(featuresFromAdditionalLayers));
      }

      return features;
    }
  }, {
    key: "_getNonPickedIntermediateHandles",
    value: function _getNonPickedIntermediateHandles() {
      var handles = [];

      var features = this._getFeaturesFromRelevantLayers();

      for (var i = 0; i < features.length; i++) {
        // Filter out the currently selected feature(s)
        var isCurrentIndexFeatureNotSelected = i < features.length && !this._handler.getSelectedFeatureIndexes().includes(i);

        if (isCurrentIndexFeatureNotSelected) {
          var geometry = features[i].geometry;
          handles.push.apply(handles, _toConsumableArray((0, _modeHandler.getEditHandlesForGeometry)(geometry, i, 'intermediate')));
        }
      }

      return handles;
    } // If no snap handle has been picked, only display the edit handles of the
    // selected feature. If a snap handle has been picked, display said snap handle
    // along with all snappable points on all non-selected features.

  }, {
    key: "getEditHandles",
    value: function getEditHandles(picks, groundCoords) {
      var _ref4 = this._modeConfig || {},
          enableSnapping = _ref4.enableSnapping;

      var handles = this._handler.getEditHandles(picks, groundCoords);

      if (!enableSnapping) return handles;

      var _ref5 = this._editHandlePicks || {},
          pickedHandle = _ref5.pickedHandle;

      if (pickedHandle) {
        handles.push.apply(handles, _toConsumableArray(this._getNonPickedIntermediateHandles()).concat([pickedHandle]));
        return handles;
      }

      var _this$_handler$featur = this._handler.featureCollection.getObject(),
          features = _this$_handler$featur.features;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._handler.getSelectedFeatureIndexes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var index = _step.value;

          if (index < features.length) {
            var geometry = features[index].geometry;
            handles.push.apply(handles, _toConsumableArray((0, _modeHandler.getEditHandlesForGeometry)(geometry, index, 'snap')));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return handles.filter(Boolean);
    }
  }, {
    key: "_performSnapIfRequired",
    value: function _performSnapIfRequired() {
      if (this._isSnapped) return;

      var _ref6 = this._editHandlePicks || {},
          pickedHandle = _ref6.pickedHandle,
          potentialSnapHandle = _ref6.potentialSnapHandle;

      if (pickedHandle && potentialSnapHandle) {
        this._isSnapped = true;
      }
    } // Unsnapping only occurs after the user snaps two polygons but continues to drag the
    // cursor past the point of resistance.

  }, {
    key: "_performUnsnapIfRequired",
    value: function _performUnsnapIfRequired() {
      if (!this._isSnapped) return;

      var _ref7 = this._editHandlePicks || {},
          potentialSnapHandle = _ref7.potentialSnapHandle;

      if (!potentialSnapHandle) {
        this._isSnapped = false;
      }
    }
  }, {
    key: "_getSnapAwareEvent",
    value: function _getSnapAwareEvent(event) {
      var _ref8 = this._editHandlePicks || {},
          potentialSnapHandle = _ref8.potentialSnapHandle;

      return potentialSnapHandle && potentialSnapHandle.position ? this._getSnappedMouseEvent(event, potentialSnapHandle.position) : event;
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event) {
      this._startDragSnapHandlePosition = ((0, _modeHandler.getPickedEditHandle)(event.picks) || {}).position;
      return this._handler.handleStartDragging(event);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event) {
      var modeActionSummary = this._handler.handleStopDragging(this._getSnapAwareEvent(event));

      this._editHandlePicks = null;
      this._isSnapped = false;
      return modeActionSummary;
    }
  }, {
    key: "getCursor",
    value: function getCursor(event) {
      return this._handler.getCursor(event);
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event) {
      var _ref9 = this._handler.getModeConfig() || {},
          enableSnapping = _ref9.enableSnapping;

      if (enableSnapping) {
        this._editHandlePicks = this._getEditHandlePicks(event);

        if (this._editHandlePicks) {
          this._performSnapIfRequired();

          this._performUnsnapIfRequired();
        }
      }

      var modeActionSummary = this._handler.handlePointerMove(this._getSnapAwareEvent(event));

      var editAction = modeActionSummary.editAction;

      if (editAction) {
        this._updatePickedHandlePosition(editAction);
      }

      return modeActionSummary;
    }
  }]);

  return SnappableHandler;
}(_modeHandler.ModeHandler);

exports.SnappableHandler = SnappableHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,