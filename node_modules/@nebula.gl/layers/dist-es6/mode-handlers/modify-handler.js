"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModifyHandler = void 0;

var _nearestPointOnLine2 = _interopRequireDefault(require("@turf/nearest-point-on-line"));

var _helpers = require("@turf/helpers");

var _utils = require("../utils.js");

var _modeHandler = require("./mode-handler.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ModifyHandler =
/*#__PURE__*/
function (_ModeHandler) {
  _inherits(ModifyHandler, _ModeHandler);

  function ModifyHandler() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ModifyHandler);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModifyHandler)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_lastPointerMovePicks", void 0);

    return _this;
  }

  _createClass(ModifyHandler, [{
    key: "getEditHandles",
    value: function getEditHandles(picks, groundCoords) {
      var _this2 = this;

      var handles = [];

      var _this$featureCollecti = this.featureCollection.getObject(),
          features = _this$featureCollecti.features;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._selectedFeatureIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _index = _step.value;

          if (_index < features.length) {
            var _handles;

            var geometry = features[_index].geometry;

            (_handles = handles).push.apply(_handles, _toConsumableArray((0, _modeHandler.getEditHandlesForGeometry)(geometry, _index)));
          } else {
            console.warn("selectedFeatureIndexes out of range ".concat(_index)); // eslint-disable-line no-console,no-undef
          }
        } // intermediate edit handle

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (picks && picks.length && groundCoords) {
        var existingEditHandle = picks.find(function (pick) {
          return pick.isEditingHandle && pick.object && pick.object.type === 'existing';
        }); // don't show intermediate point when too close to an existing edit handle

        var featureAsPick = !existingEditHandle && picks.find(function (pick) {
          return !pick.isEditingHandle;
        }); // is the feature in the pick selected

        if (featureAsPick && !featureAsPick.object.geometry.type.includes('Point') && this._selectedFeatureIndexes.includes(featureAsPick.index)) {
          var intermediatePoint = null;
          var positionIndexPrefix = [];
          var referencePoint = (0, _helpers.point)(groundCoords); // process all lines of the (single) feature

          (0, _utils.recursivelyTraverseNestedArrays)(featureAsPick.object.geometry.coordinates, [], function (lineString, prefix) {
            var lineStringFeature = (0, _helpers.lineString)(lineString);

            var candidateIntermediatePoint = _this2.nearestPointOnLine(lineStringFeature, referencePoint);

            if (!intermediatePoint || candidateIntermediatePoint.properties.dist < intermediatePoint.properties.dist) {
              intermediatePoint = candidateIntermediatePoint;
              positionIndexPrefix = prefix;
            }
          }); // tack on the lone intermediate point to the set of handles

          if (intermediatePoint) {
            var _intermediatePoint = intermediatePoint,
                position = _intermediatePoint.geometry.coordinates,
                index = _intermediatePoint.properties.index;
            handles = _toConsumableArray(handles).concat([{
              position: position,
              positionIndexes: _toConsumableArray(positionIndexPrefix).concat([index + 1]),
              featureIndex: featureAsPick.index,
              type: 'intermediate'
            }]);
          }
        }
      }

      return handles;
    } // turf.js does not support elevation for nearestPointOnLine

  }, {
    key: "nearestPointOnLine",
    value: function nearestPointOnLine(line, inPoint) {
      // TODO: implement 3D nearestPointOnLine
      return (0, _nearestPointOnLine2.default)(line, inPoint);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var editAction = null;
      var clickedEditHandle = (0, _modeHandler.getPickedEditHandle)(event.picks);

      if (clickedEditHandle && clickedEditHandle.featureIndex >= 0) {
        if (clickedEditHandle.type === 'existing') {
          var updatedData;

          try {
            updatedData = this.getImmutableFeatureCollection().removePosition(clickedEditHandle.featureIndex, clickedEditHandle.positionIndexes).getObject();
          } catch (ignored) {// This happens if user attempts to remove the last point
          }

          if (updatedData) {
            editAction = {
              updatedData: updatedData,
              editType: 'removePosition',
              featureIndexes: [clickedEditHandle.featureIndex],
              editContext: {
                positionIndexes: clickedEditHandle.positionIndexes,
                position: clickedEditHandle.position
              }
            };
          }
        } else if (clickedEditHandle.type === 'intermediate') {
          var _updatedData = this.getImmutableFeatureCollection().addPosition(clickedEditHandle.featureIndex, clickedEditHandle.positionIndexes, clickedEditHandle.position).getObject();

          if (_updatedData) {
            editAction = {
              updatedData: _updatedData,
              editType: 'addPosition',
              featureIndexes: [clickedEditHandle.featureIndex],
              editContext: {
                positionIndexes: clickedEditHandle.positionIndexes,
                position: clickedEditHandle.position
              }
            };
          }
        }
      }

      return editAction;
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event) {
      this._lastPointerMovePicks = event.picks;
      var editAction = null;
      var editHandle = (0, _modeHandler.getPickedEditHandle)(event.pointerDownPicks);

      if (event.isDragging && editHandle) {
        var updatedData = this.getImmutableFeatureCollection().replacePosition(editHandle.featureIndex, editHandle.positionIndexes, event.groundCoords).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'movePosition',
          featureIndexes: [editHandle.featureIndex],
          editContext: {
            positionIndexes: editHandle.positionIndexes,
            position: event.groundCoords
          }
        };
      } // Cancel map panning if pointer went down on an edit handle


      var cancelMapPan = Boolean(editHandle);
      return {
        editAction: editAction,
        cancelMapPan: cancelMapPan
      };
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event) {
      var editAction = null;
      var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
      var editHandle = (0, _modeHandler.getPickedEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle && editHandle.type === 'intermediate') {
        var updatedData = this.getImmutableFeatureCollection().addPosition(editHandle.featureIndex, editHandle.positionIndexes, event.groundCoords).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'addPosition',
          featureIndexes: [editHandle.featureIndex],
          editContext: {
            positionIndexes: editHandle.positionIndexes,
            position: event.groundCoords
          }
        };
      }

      return editAction;
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event) {
      var editAction = null;
      var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
      var editHandle = (0, _modeHandler.getPickedEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle) {
        var updatedData = this.getImmutableFeatureCollection().replacePosition(editHandle.featureIndex, editHandle.positionIndexes, event.groundCoords).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'finishMovePosition',
          featureIndexes: [editHandle.featureIndex],
          editContext: {
            positionIndexes: editHandle.positionIndexes,
            position: event.groundCoords
          }
        };
      }

      return editAction;
    }
  }, {
    key: "getCursor",
    value: function getCursor(_ref) {
      var isDragging = _ref.isDragging;
      var picks = this._lastPointerMovePicks;

      if (picks && picks.length > 0) {
        var handlePicked = picks.some(function (pick) {
          return pick.isEditingHandle;
        });

        if (handlePicked) {
          return 'cell';
        }
      }

      return isDragging ? 'grabbing' : 'grab';
    }
  }]);

  return ModifyHandler;
}(_modeHandler.ModeHandler);

exports.ModifyHandler = ModifyHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlLWhhbmRsZXJzL21vZGlmeS1oYW5kbGVyLmpzIl0sIm5hbWVzIjpbIk1vZGlmeUhhbmRsZXIiLCJwaWNrcyIsImdyb3VuZENvb3JkcyIsImhhbmRsZXMiLCJmZWF0dXJlQ29sbGVjdGlvbiIsImdldE9iamVjdCIsImZlYXR1cmVzIiwiX3NlbGVjdGVkRmVhdHVyZUluZGV4ZXMiLCJpbmRleCIsImxlbmd0aCIsImdlb21ldHJ5IiwicHVzaCIsImNvbnNvbGUiLCJ3YXJuIiwiZXhpc3RpbmdFZGl0SGFuZGxlIiwiZmluZCIsInBpY2siLCJpc0VkaXRpbmdIYW5kbGUiLCJvYmplY3QiLCJ0eXBlIiwiZmVhdHVyZUFzUGljayIsImluY2x1ZGVzIiwiaW50ZXJtZWRpYXRlUG9pbnQiLCJwb3NpdGlvbkluZGV4UHJlZml4IiwicmVmZXJlbmNlUG9pbnQiLCJjb29yZGluYXRlcyIsImxpbmVTdHJpbmciLCJwcmVmaXgiLCJsaW5lU3RyaW5nRmVhdHVyZSIsImNhbmRpZGF0ZUludGVybWVkaWF0ZVBvaW50IiwibmVhcmVzdFBvaW50T25MaW5lIiwicHJvcGVydGllcyIsImRpc3QiLCJwb3NpdGlvbiIsInBvc2l0aW9uSW5kZXhlcyIsImZlYXR1cmVJbmRleCIsImxpbmUiLCJpblBvaW50IiwiZXZlbnQiLCJlZGl0QWN0aW9uIiwiY2xpY2tlZEVkaXRIYW5kbGUiLCJ1cGRhdGVkRGF0YSIsImdldEltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uIiwicmVtb3ZlUG9zaXRpb24iLCJpZ25vcmVkIiwiZWRpdFR5cGUiLCJmZWF0dXJlSW5kZXhlcyIsImVkaXRDb250ZXh0IiwiYWRkUG9zaXRpb24iLCJfbGFzdFBvaW50ZXJNb3ZlUGlja3MiLCJlZGl0SGFuZGxlIiwicG9pbnRlckRvd25QaWNrcyIsImlzRHJhZ2dpbmciLCJyZXBsYWNlUG9zaXRpb24iLCJjYW5jZWxNYXBQYW4iLCJCb29sZWFuIiwic2VsZWN0ZWRGZWF0dXJlSW5kZXhlcyIsImdldFNlbGVjdGVkRmVhdHVyZUluZGV4ZXMiLCJoYW5kbGVQaWNrZWQiLCJzb21lIiwiTW9kZUhhbmRsZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFYUEsYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FHSUMsSyxFQUF1QkMsWSxFQUF1QztBQUFBOztBQUMzRSxVQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFEMkUsa0NBRXRELEtBQUtDLGlCQUFMLENBQXVCQyxTQUF2QixFQUZzRDtBQUFBLFVBRW5FQyxRQUZtRSx5QkFFbkVBLFFBRm1FOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUkzRSw2QkFBb0IsS0FBS0MsdUJBQXpCLDhIQUFrRDtBQUFBLGNBQXZDQyxNQUF1Qzs7QUFDaEQsY0FBSUEsTUFBSyxHQUFHRixRQUFRLENBQUNHLE1BQXJCLEVBQTZCO0FBQUE7O0FBQUEsZ0JBQ25CQyxRQURtQixHQUNOSixRQUFRLENBQUNFLE1BQUQsQ0FERixDQUNuQkUsUUFEbUI7O0FBRTNCLHdCQUFBUCxPQUFPLEVBQUNRLElBQVIsb0NBQWdCLDRDQUEwQkQsUUFBMUIsRUFBb0NGLE1BQXBDLENBQWhCO0FBQ0QsV0FIRCxNQUdPO0FBQ0xJLFlBQUFBLE9BQU8sQ0FBQ0MsSUFBUiwrQ0FBb0RMLE1BQXBELEdBREssQ0FDeUQ7QUFDL0Q7QUFDRixTQVgwRSxDQWEzRTs7QUFiMkU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFjM0UsVUFBSVAsS0FBSyxJQUFJQSxLQUFLLENBQUNRLE1BQWYsSUFBeUJQLFlBQTdCLEVBQTJDO0FBQ3pDLFlBQU1ZLGtCQUFrQixHQUFHYixLQUFLLENBQUNjLElBQU4sQ0FDekIsVUFBQUMsSUFBSTtBQUFBLGlCQUFJQSxJQUFJLENBQUNDLGVBQUwsSUFBd0JELElBQUksQ0FBQ0UsTUFBN0IsSUFBdUNGLElBQUks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L0NhLFVBQStDLFFBQS9DQSxVQUErQztBQUN6RCxVQUFNbkQsS0FBSyxHQUFHLEtBQUtnRCxxQkFBbkI7O0FBRUEsVUFBSWhELEtBQUssSUFBSUEsS0FBSyxDQUFDUSxNQUFOLEdBQWUsQ0FBNUIsRUFBK0I7QUFDN0IsWUFBTWlELFlBQVksR0FBR3pELEtBQUssQ0FBQzBELElBQU4sQ0FBVyxVQUFBM0MsSUFBSTtBQUFBLGlCQUFJQSxJQUFJLENBQUNDLGVBQVQ7QUFBQSxTQUFmLENBQXJCOztBQUNBLFlBQUl5QyxZQUFKLEVBQWtCO0FBQ2hCLGlCQUFPLE1BQVA7QUFDRDtBQUNGOztBQUVELGFBQU9OLFVBQVUsR0FBRyxVQUFILEdBQWdCLE1BQWpDO0FBQ0Q7Ozs7RUE3TmdDUSx3QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBuZWFyZXN0UG9pbnRPbkxpbmUgZnJvbSAnQHR1cmYvbmVhcmVzdC1wb2ludC1vbi1saW5lJztcbmltcG9ydCB7IHBvaW50LCBsaW5lU3RyaW5nIGFzIHRvTGluZVN0cmluZyB9IGZyb20gJ0B0dXJmL2hlbHBlcnMnO1xuaW1wb3J0IHsgcmVjdXJzaXZlbHlUcmF2ZXJzZU5lc3RlZEFycmF5cyB9IGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0eXBlIHsgUG9zaXRpb24gfSBmcm9tICcuLi9nZW9qc29uLXR5cGVzLmpzJztcbmltcG9ydCB0eXBlIHtcbiAgQ2xpY2tFdmVudCxcbiAgUG9pbnRlck1vdmVFdmVudCxcbiAgU3RhcnREcmFnZ2luZ0V2ZW50LFxuICBTdG9wRHJhZ2dpbmdFdmVudFxufSBmcm9tICcuLi9ldmVudC10eXBlcy5qcyc7XG5pbXBvcnQgdHlwZSB7IEVkaXRBY3Rpb24sIEVkaXRIYW5kbGUgfSBmcm9tICcuL21vZGUtaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBNb2RlSGFuZGxlciwgZ2V0UGlja2VkRWRpdEhhbmRsZSwgZ2V0RWRpdEhhbmRsZXNGb3JHZW9tZXRyeSB9IGZyb20gJy4vbW9kZS1oYW5kbGVyLmpzJztcblxuZXhwb3J0IGNsYXNzIE1vZGlmeUhhbmRsZXIgZXh0ZW5kcyBNb2RlSGFuZGxlciB7XG4gIF9sYXN0UG9pbnRlck1vdmVQaWNrczogKjtcblxuICBnZXRFZGl0SGFuZGxlcyhwaWNrcz86IEFycmF5PE9iamVjdD4sIGdyb3VuZENvb3Jkcz86IFBvc2l0aW9uKTogRWRpdEhhbmRsZVtdIHtcbiAgICBsZXQgaGFuZGxlcyA9IFtdO1xuICAgIGNvbnN0IHsgZmVhdHVyZXMgfSA9IHRoaXMuZmVhdHVyZUNvbGxlY3Rpb24uZ2V0T2JqZWN0KCk7XG5cbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHRoaXMuX3NlbGVjdGVkRmVhdHVyZUluZGV4ZXMpIHtcbiAgICAgIGlmIChpbmRleCA8IGZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7IGdlb21ldHJ5IH0gPSBmZWF0dXJlc1tpbmRleF07XG4gICAgICAgIGhhbmRsZXMucHVzaCguLi5nZXRFZGl0SGFuZGxlc0Zvckdlb21ldHJ5KGdlb21ldHJ5LCBpbmRleCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBzZWxlY3RlZEZlYXR1cmVJbmRleGVzIG91dCBvZiByYW5nZSAke2luZGV4fWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUsbm8tdW5kZWZcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpbnRlcm1lZGlhdGUgZWRpdCBoYW5kbGVcbiAgICBpZiAocGlja3MgJiYgcGlja3MubGVuZ3RoICYmIGdyb3VuZENvb3Jkcykge1xuICAgICAgY29uc3QgZXhpc3RpbmdFZGl0SGFuZGxlID0gcGlja3MuZmluZChcbiAgICAgICAgcGljayA9PiBwaWNrLmlzRWRpdGluZ0hhbmRsZSAmJiBwaWNrLm9iamVjdCAmJiBwaWNrLm9iamVjdC50eXBlID09PSAnZXhpc3RpbmcnXG4gICAgICApO1xuICAgICAgLy8gZG9uJ3Qgc2hvdyBpbnRlcm1lZGlhdGUgcG9pbnQgd2hlbiB0b28gY2xvc2UgdG8gYW4gZXhpc3RpbmcgZWRpdCBoYW5kbGVcbiAgICAgIGNvbnN0IGZlYXR1cmVBc1BpY2sgPSAhZXhpc3RpbmdFZGl0SGFuZGxlICYmIHBpY2tzLmZpbmQocGljayA9PiAhcGljay5pc0VkaXRpbmdIYW5kbGUpO1xuXG4gICAgICAvLyBpcyB0aGUgZmVhdHVyZSBpbiB0aGUgcGljayBzZWxlY3RlZFxuICAgICAgaWYgKFxuICAgICAgICBmZWF0dXJlQXNQaWNrICYmXG4gICAgICAgICFmZWF0dXJlQXNQaWNrLm9iamVjdC5nZW9tZXRyeS50eXBlLmluY2x1ZGVzKCdQb2ludCcpICYmXG4gICAgICAgIHRoaXMuX3NlbGVjdGVkRmVhdHVyZUluZGV4ZXMuaW5jbHVkZXMoZmVhdHVyZUFzUGljay5pbmRleClcbiAgICAgICkge1xuICAgICAgICBsZXQgaW50ZXJtZWRpYXRlUG9pbnQgPSBudWxsO1xuICAgICAgICBsZXQgcG9zaXRpb25JbmRleFByZWZpeCA9IFtdO1xuICAgICAgICBjb25zdCByZWZlcmVuY2VQb2ludCA9IHBvaW50KGdyb3VuZENvb3Jkcyk7XG4gICAgICAgIC8vIHByb2Nlc3MgYWxsIGxpbmVzIG9mIHRoZSAoc2luZ2xlKSBmZWF0dXJlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VOZXN0ZWRBcnJheXMoXG4gICAgICAgICAgZmVhdHVyZUFzUGljay5vYmplY3QuZ2VvbWV0cnkuY29vcmRpbmF0ZXMsXG4gICAgICAgICAgW10sXG4gICAgICAgICAgKGxpbmVTdHJpbmcsIHByZWZpeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGluZVN0cmluZ0ZlYXR1cmUgPSB0b0xpbmVTdHJpbmcobGluZVN0cmluZyk7XG4gICAgICAgICAgICBjb25zdCBjYW5kaWRhdGVJbnRlcm1lZGlhdGVQb2ludCA9IHRoaXMubmVhcmVzdFBvaW50T25MaW5lKFxuICAgICAgICAgICAgICBsaW5lU3RyaW5nRmVhdHVyZSxcbiAgICAgICAgICAgICAgcmVmZXJlbmNlUG9pbnRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICFpbnRlcm1lZGlhdGVQb2ludCB8fFxuICAgICAgICAgICAgICBjYW5kaWRhdGVJbnRlcm1lZGlhdGVQb2ludC5wcm9wZXJ0aWVzLmRpc3QgPCBpbnRlcm1lZGlhdGVQb2ludC5wcm9wZXJ0aWVzLmRpc3RcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpbnRlcm1lZGlhdGVQb2ludCA9IGNhbmRpZGF0ZUludGVybWVkaWF0ZVBvaW50O1xuICAgICAgICAgICAgICBwb3NpdGlvbkluZGV4UHJlZml4ID0gcHJlZml4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgLy8gdGFjayBvbiB0aGUgbG9uZSBpbnRlcm1lZGlhdGUgcG9pbnQgdG8gdGhlIHNldCBvZiBoYW5kbGVzXG4gICAgICAgIGlmIChpbnRlcm1lZGlhdGVQb2ludCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGdlb21ldHJ5OiB7IGNvb3JkaW5hdGVzOiBwb3NpdGlvbiB9LFxuICAgICAgICAgICAgcHJvcGVydGllczogeyBpbmRleCB9XG4gICAgICAgICAgfSA9IGludGVybWVkaWF0ZVBvaW50O1xuICAgICAgICAgIGhhbmRsZXMgPSBbXG4gICAgICAgICAgICAuLi5oYW5kbGVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgcG9zaXRpb25JbmRleGVzOiBbLi4ucG9zaXRpb25JbmRleFByZWZpeCwgaW5kZXggKyAxXSxcbiAgICAgICAgICAgICAgZmVhdHVyZUluZGV4OiBmZWF0dXJlQXNQaWNrLmluZGV4LFxuICAgICAgICAgICAgICB0eXBlOiAnaW50ZXJtZWRpYXRlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlcztcbiAgfVxuXG4gIC8vIHR1cmYuanMgZG9lcyBub3Qgc3VwcG9ydCBlbGV2YXRpb24gZm9yIG5lYXJlc3RQb2ludE9uTGluZVxuICBuZWFyZXN0UG9pbnRPbkxpbmUobGluZTogYW55LCBpblBvaW50OiBhbnkpOiBhbnkge1xuICAgIC8vIFRPRE86IGltcGxlbWVudCAzRCBuZWFyZXN0UG9pbnRPbkxpbmVcbiAgICByZXR1cm4gbmVhcmVzdFBvaW50T25MaW5lKGxpbmUsIGluUG9pbnQpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soZXZlbnQ6IENsaWNrRXZlbnQpOiA/RWRpdEFjdGlvbiB7XG4gICAgbGV0IGVkaXRBY3Rpb246ID9FZGl0QWN0aW9uID0gbnVsbDtcblxuICAgIGNvbnN0IGNsaWNrZWRFZGl0SGFuZGxlID0gZ2V0UGlja2VkRWRpdEhhbmRsZShldmVudC5waWNrcyk7XG5cbiAgICBpZiAoY2xpY2tlZEVkaXRIYW5kbGUgJiYgY2xpY2tlZEVkaXRIYW5kbGUuZmVhdHVyZUluZGV4ID49IDApIHtcbiAgICAgIGlmIChjbGlja2VkRWRpdEhhbmRsZS50eXBlID09PSAnZXhpc3RpbmcnKSB7XG4gICAgICAgIGxldCB1cGRhdGVkRGF0YTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB1cGRhdGVkRGF0YSA9IHRoaXMuZ2V0SW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24oKVxuICAgICAgICAgICAgLnJlbW92ZVBvc2l0aW9uKGNsaWNrZWRFZGl0SGFuZGxlLmZlYXR1cmVJbmRleCwgY2xpY2tlZEVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzKVxuICAgICAgICAgICAgLmdldE9iamVjdCgpO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIGlmIHVzZXIgYXR0ZW1wdHMgdG8gcmVtb3ZlIHRoZSBsYXN0IHBvaW50XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXBkYXRlZERhdGEpIHtcbiAgICAgICAgICBlZGl0QWN0aW9uID0ge1xuICAgICAgICAgICAgdXBkYXRlZERhdGEsXG4gICAgICAgICAgICBlZGl0VHlwZTogJ3JlbW92ZVBvc2l0aW9uJyxcbiAgICAgICAgICAgIGZlYXR1cmVJbmRleGVzOiBbY2xpY2tlZEVkaXRIYW5kbGUuZmVhdHVyZUluZGV4XSxcbiAgICAgICAgICAgIGVkaXRDb250ZXh0OiB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uSW5kZXhlczogY2xpY2tlZEVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogY2xpY2tlZEVkaXRIYW5kbGUucG9zaXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNsaWNrZWRFZGl0SGFuZGxlLnR5cGUgPT09ICdpbnRlcm1lZGlhdGUnKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWREYXRhID0gdGhpcy5nZXRJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbigpXG4gICAgICAgICAgLmFkZFBvc2l0aW9uKFxuICAgICAgICAgICAgY2xpY2tlZEVkaXRIYW5kbGUuZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgY2xpY2tlZEVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzLFxuICAgICAgICAgICAgY2xpY2tlZEVkaXRIYW5kbGUucG9zaXRpb25cbiAgICAgICAgICApXG4gICAgICAgICAgLmdldE9iamVjdCgpO1xuXG4gICAgICAgIGlmICh1cGRhdGVkRGF0YSkge1xuICAgICAgICAgIGVkaXRBY3Rpb24gPSB7XG4gICAgICAgICAgICB1cGRhdGVkRGF0YSxcbiAgICAgICAgICAgIGVkaXRUeXBlOiAnYWRkUG9zaXRpb24nLFxuICAgICAgICAgICAgZmVhdHVyZUluZGV4ZXM6IFtjbGlja2VkRWRpdEhhbmRsZS5mZWF0dXJlSW5kZXhdLFxuICAgICAgICAgICAgZWRpdENvbnRleHQ6IHtcbiAgICAgICAgICAgICAgcG9zaXRpb25JbmRleGVzOiBjbGlja2VkRWRpdEhhbmRsZS5wb3NpdGlvbkluZGV4ZXMsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBjbGlja2VkRWRpdEhhbmRsZS5wb3NpdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVkaXRBY3Rpb247XG4gIH1cblxuICBoYW5kbGVQb2ludGVyTW92ZShldmVudDogUG9pbnRlck1vdmVFdmVudCk6IHsgZWRpdEFjdGlvbjogP0VkaXRBY3Rpb24sIGNhbmNlbE1hcFBhbjogYm9vbGVhbiB9IHtcbiAgICB0aGlzLl9sYXN0UG9pbnRlck1vdmVQaWNrcyA9IGV2ZW50LnBpY2tzO1xuXG4gICAgbGV0IGVkaXRBY3Rpb246ID9FZGl0QWN0aW9uID0gbnVsbDtcblxuICAgIGNvbnN0IGVkaXRIYW5kbGUgPSBnZXRQaWNrZWRFZGl0SGFuZGxlKGV2ZW50LnBvaW50ZXJEb3duUGlja3MpO1xuXG4gICAgaWYgKGV2ZW50LmlzRHJhZ2dpbmcgJiYgZWRpdEhhbmRsZSkge1xuICAgICAgY29uc3QgdXBkYXRlZERhdGEgPSB0aGlzLmdldEltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uKClcbiAgICAgICAgLnJlcGxhY2VQb3NpdGlvbihlZGl0SGFuZGxlLmZlYXR1cmVJbmRleCwgZWRpdEhhbmRsZS5wb3NpdGlvbkluZGV4ZXMsIGV2ZW50Lmdyb3VuZENvb3JkcylcbiAgICAgICAgLmdldE9iamVjdCgpO1xuXG4gICAgICBlZGl0QWN0aW9uID0ge1xuICAgICAgICB1cGRhdGVkRGF0YSxcbiAgICAgICAgZWRpdFR5cGU6ICdtb3ZlUG9zaXRpb24nLFxuICAgICAgICBmZWF0dXJlSW5kZXhlczogW2VkaXRIYW5kbGUuZmVhdHVyZUluZGV4XSxcbiAgICAgICAgZWRpdENvbnRleHQ6IHtcbiAgICAgICAgICBwb3NpdGlvbkluZGV4ZXM6IGVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzLFxuICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5ncm91bmRDb29yZHNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDYW5jZWwgbWFwIHBhbm5pbmcgaWYgcG9pbnRlciB3ZW50IGRvd24gb24gYW4gZWRpdCBoYW5kbGVcbiAgICBjb25zdCBjYW5jZWxNYXBQYW4gPSBCb29sZWFuKGVkaXRIYW5kbGUpO1xuXG4gICAgcmV0dXJuIHsgZWRpdEFjdGlvbiwgY2FuY2VsTWFwUGFuIH07XG4gIH1cblxuICBoYW5kbGVTdGFydERyYWdnaW5nKGV2ZW50OiBTdGFydERyYWdnaW5nRXZlbnQpOiA/RWRpdEFjdGlvbiB7XG4gICAgbGV0IGVkaXRBY3Rpb246ID9FZGl0QWN0aW9uID0gbnVsbDtcblxuICAgIGNvbnN0IHNlbGVjdGVkRmVhdHVyZUluZGV4ZXMgPSB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZUluZGV4ZXMoKTtcblxuICAgIGNvbnN0IGVkaXRIYW5kbGUgPSBnZXRQaWNrZWRFZGl0SGFuZGxlKGV2ZW50LnBpY2tzKTtcbiAgICBpZiAoc2VsZWN0ZWRGZWF0dXJlSW5kZXhlcy5sZW5ndGggJiYgZWRpdEhhbmRsZSAmJiBlZGl0SGFuZGxlLnR5cGUgPT09ICdpbnRlcm1lZGlhdGUnKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHRoaXMuZ2V0SW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24oKVxuICAgICAgICAuYWRkUG9zaXRpb24oZWRpdEhhbmRsZS5mZWF0dXJlSW5kZXgsIGVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzLCBldmVudC5ncm91bmRDb29yZHMpXG4gICAgICAgIC5nZXRPYmplY3QoKTtcblxuICAgICAgZWRpdEFjdGlvbiA9IHtcbiAgICAgICAgdXBkYXRlZERhdGEsXG4gICAgICAgIGVkaXRUeXBlOiAnYWRkUG9zaXRpb24nLFxuICAgICAgICBmZWF0dXJlSW5kZXhlczogW2VkaXRIYW5kbGUuZmVhdHVyZUluZGV4XSxcbiAgICAgICAgZWRpdENvbnRleHQ6IHtcbiAgICAgICAgICBwb3NpdGlvbkluZGV4ZXM6IGVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzLFxuICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5ncm91bmRDb29yZHNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWRpdEFjdGlvbjtcbiAgfVxuXG4gIGhhbmRsZVN0b3BEcmFnZ2luZyhldmVudDogU3RvcERyYWdnaW5nRXZlbnQpOiA/RWRpdEFjdGlvbiB7XG4gICAgbGV0IGVkaXRBY3Rpb246ID9FZGl0QWN0aW9uID0gbnVsbDtcblxuICAgIGNvbnN0IHNlbGVjdGVkRmVhdHVyZUluZGV4ZXMgPSB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZUluZGV4ZXMoKTtcbiAgICBjb25zdCBlZGl0SGFuZGxlID0gZ2V0UGlja2VkRWRpdEhhbmRsZShldmVudC5waWNrcyk7XG4gICAgaWYgKHNlbGVjdGVkRmVhdHVyZUluZGV4ZXMubGVuZ3RoICYmIGVkaXRIYW5kbGUpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZWREYXRhID0gdGhpcy5nZXRJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbigpXG4gICAgICAgIC5yZXBsYWNlUG9zaXRpb24oZWRpdEhhbmRsZS5mZWF0dXJlSW5kZXgsIGVkaXRIYW5kbGUucG9zaXRpb25JbmRleGVzLCBldmVudC5ncm91bmRDb29yZHMpXG4gICAgICAgIC5nZXRPYmplY3QoKTtcblxuICAgICAgZWRpdEFjdGlvbiA9IHtcbiAgICAgICAgdXBkYXRlZERhdGEsXG4gICAgICAgIGVkaXRUeXBlOiAnZmluaXNoTW92ZVBvc2l0aW9uJyxcbiAgICAgICAgZmVhdHVyZUluZGV4ZXM6IFtlZGl0SGFuZGxlLmZlYXR1cmVJbmRleF0sXG4gICAgICAgIGVkaXRDb250ZXh0OiB7XG4gICAgICAgICAgcG9zaXRpb25JbmRleGVzOiBlZGl0SGFuZGxlLnBvc2l0aW9uSW5kZXhlcyxcbiAgICAgICAgICBwb3NpdGlvbjogZXZlbnQuZ3JvdW5kQ29vcmRzXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGVkaXRBY3Rpb247XG4gIH1cblxuICBnZXRDdXJzb3IoeyBpc0RyYWdnaW5nIH06IHsgaXNEcmFnZ2luZzogYm9vbGVhbiB9KTogc3RyaW5nIHtcbiAgICBjb25zdCBwaWNrcyA9IHRoaXMuX2xhc3RQb2ludGVyTW92ZVBpY2tzO1xuXG4gICAgaWYgKHBpY2tzICYmIHBpY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGhhbmRsZVBpY2tlZCA9IHBpY2tzLnNvbWUocGljayA9PiBwaWNrLmlzRWRpdGluZ0hhbmRsZSk7XG4gICAgICBpZiAoaGFuZGxlUGlja2VkKSB7XG4gICAgICAgIHJldHVybiAnY2VsbCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRHJhZ2dpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xuICB9XG59XG4iXX0=