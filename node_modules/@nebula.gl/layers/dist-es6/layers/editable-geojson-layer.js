"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _layers = require("@deck.gl/layers");

var _modeHandler = require("../mode-handlers/mode-handler.js");

var _viewHandler = require("../mode-handlers/view-handler.js");

var _modifyHandler = require("../mode-handlers/modify-handler.js");

var _elevationHandler = require("../mode-handlers/elevation-handler.js");

var _snappableHandler = require("../mode-handlers/snappable-handler.js");

var _translateHandler = require("../mode-handlers/translate-handler.js");

var _duplicateHandler = require("../mode-handlers/duplicate-handler");

var _rotateHandler = require("../mode-handlers/rotate-handler.js");

var _scaleHandler = require("../mode-handlers/scale-handler.js");

var _drawPointHandler = require("../mode-handlers/draw-point-handler.js");

var _drawLineStringHandler = require("../mode-handlers/draw-line-string-handler.js");

var _drawPolygonHandler = require("../mode-handlers/draw-polygon-handler.js");

var _draw90degreePolygonHandler = require("../mode-handlers/draw-90degree-polygon-handler.js");

var _drawRectangleHandler = require("../mode-handlers/draw-rectangle-handler.js");

var _splitPolygonHandler = require("../mode-handlers/split-polygon-handler.js");

var _drawRectangleUsingThreePointsHandler = require("../mode-handlers/draw-rectangle-using-three-points-handler.js");

var _drawCircleFromCenterHandler = require("../mode-handlers/draw-circle-from-center-handler.js");

var _drawCircleByBoundingBoxHandler = require("../mode-handlers/draw-circle-by-bounding-box-handler.js");

var _drawEllipseByBoundingBoxHandler = require("../mode-handlers/draw-ellipse-by-bounding-box-handler.js");

var _drawEllipseUsingThreePointsHandler = require("../mode-handlers/draw-ellipse-using-three-points-handler.js");

var _extrudeHandler = require("../mode-handlers/extrude-handler.js");

var _editableLayer = _interopRequireDefault(require("./editable-layer.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DEFAULT_LINE_COLOR = [0x0, 0x0, 0x0, 0xff];
var DEFAULT_FILL_COLOR = [0x0, 0x0, 0x0, 0x90];
var DEFAULT_SELECTED_LINE_COLOR = [0x90, 0x90, 0x90, 0xff];
var DEFAULT_SELECTED_FILL_COLOR = [0x90, 0x90, 0x90, 0x90];
var DEFAULT_EDITING_EXISTING_POINT_COLOR = [0xc0, 0x0, 0x0, 0xff];
var DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR = [0x0, 0x0, 0x0, 0x80];
var DEFAULT_EDITING_SNAP_POINT_COLOR = [0x7c, 0x00, 0xc0, 0xff];
var DEFAULT_EDITING_EXISTING_POINT_RADIUS = 5;
var DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS = 3;
var DEFAULT_EDITING_SNAP_POINT_RADIUS = 7;

function getEditHandleColor(handle) {
  switch (handle.type) {
    case 'existing':
      return DEFAULT_EDITING_EXISTING_POINT_COLOR;

    case 'snap':
      return DEFAULT_EDITING_SNAP_POINT_COLOR;

    case 'intermediate':
    default:
      return DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR;
  }
}

function getEditHandleRadius(handle) {
  switch (handle.type) {
    case 'existing':
      return DEFAULT_EDITING_EXISTING_POINT_RADIUS;

    case 'snap':
      return DEFAULT_EDITING_SNAP_POINT_RADIUS;

    case 'intermediate':
    default:
      return DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS;
  }
}

var defaultProps = {
  mode: 'modify',
  // Edit and interaction events
  onEdit: function onEdit() {},
  pickable: true,
  fp64: false,
  filled: true,
  stroked: true,
  lineWidthScale: 1,
  lineWidthMinPixels: 1,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  lineJointRounded: false,
  lineMiterLimit: 4,
  pointRadiusScale: 1,
  pointRadiusMinPixels: 2,
  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,
  lineDashJustified: false,
  getLineColor: function getLineColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;
  },
  getFillColor: function getFillColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR;
  },
  getRadius: function getRadius(f) {
    return f && f.properties && f.properties.radius || f && f.properties && f.properties.size || 1;
  },
  getLineWidth: function getLineWidth(f) {
    return f && f.properties && f.properties.lineWidth || 1;
  },
  getLineDashArray: function getLineDashArray(feature, isSelected, mode) {
    return isSelected && mode !== 'view' ? [7, 4] : [0, 0];
  },
  // Tentative feature rendering
  getTentativeLineDashArray: function getTentativeLineDashArray(f, mode) {
    return [7, 4];
  },
  getTentativeLineColor: function getTentativeLineColor(f, mode) {
    return DEFAULT_SELECTED_LINE_COLOR;
  },
  getTentativeFillColor: function getTentativeFillColor(f, mode) {
    return DEFAULT_SELECTED_FILL_COLOR;
  },
  getTentativeLineWidth: function getTentativeLineWidth(f, mode) {
    return f && f.properties && f.properties.lineWidth || 1;
  },
  editHandleType: 'point',
  editHandleParameters: {},
  editHandleLayerProps: {},
  // point handles
  editHandlePointRadiusScale: 1,
  editHandlePointOutline: false,
  editHandlePointStrokeWidth: 1,
  editHandlePointRadiusMinPixels: 4,
  editHandlePointRadiusMaxPixels: 8,
  getEditHandlePointColor: getEditHandleColor,
  getEditHandlePointRadius: getEditHandleRadius,
  // icon handles
  editHandleIconAtlas: null,
  editHandleIconMapping: null,
  editHandleIconSizeScale: 1,
  getEditHandleIcon: function getEditHandleIcon(handle) {
    return handle.type;
  },
  getEditHandleIconSize: 10,
  getEditHandleIconColor: getEditHandleColor,
  getEditHandleIconAngle: 0,
  // Mode handlers
  modeHandlers: {
    view: new _viewHandler.ViewHandler(),
    modify: new _modifyHandler.ModifyHandler(),
    elevation: new _elevationHandler.ElevationHandler(),
    extrude: new _extrudeHandler.ExtrudeHandler(),
    rotate: new _rotateHandler.RotateHandler(),
    translate: new _snappableHandler.SnappableHandler(new _translateHandler.TranslateHandler()),
    duplicate: new _duplicateHandler.DuplicateHandler(),
    scale: new _scaleHandler.ScaleHandler(),
    drawPoint: new _drawPointHandler.DrawPointHandler(),
    drawLineString: new _drawLineStringHandler.DrawLineStringHandler(),
    drawPolygon: new _drawPolygonHandler.DrawPolygonHandler(),
    draw90DegreePolygon: new _draw90degreePolygonHandler.Draw90DegreePolygonHandler(),
    split: new _splitPolygonHandler.SplitPolygonHandler(),
    drawRectangle: new _drawRectangleHandler.DrawRectangleHandler(),
    drawRectangleUsing3Points: new _drawRectangleUsingThreePointsHandler.DrawRectangleUsingThreePointsHandler(),
    drawCircleFromCenter: new _drawCircleFromCenterHandler.DrawCircleFromCenterHandler(),
    drawCircleByBoundingBox: new _drawCircleByBoundingBoxHandler.DrawCircleByBoundingBoxHandler(),
    drawEllipseByBoundingBox: new _drawEllipseByBoundingBoxHandler.DrawEllipseByBoundingBoxHandler(),
    drawEllipseUsing3Points: new _drawEllipseUsingThreePointsHandler.DrawEllipseUsingThreePointsHandler()
  }
};

// type State = {
//   modeHandler: EditableFeatureCollection,
//   tentativeFeature: ?Feature,
//   editHandles: any[],
//   selectedFeatures: Feature[]
// };
var EditableGeoJsonLayer =
/*#__PURE__*/
function (_EditableLayer) {
  _inherits(EditableGeoJsonLayer, _EditableLayer);

  function EditableGeoJsonLayer() {
    _classCallCheck(this, EditableGeoJsonLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(EditableGeoJsonLayer).apply(this, arguments));
  }

  _createClass(EditableGeoJsonLayer, [{
    key: "renderLayers",
    // state: State;
    // props: Props;
    // setState: ($Shape<State>) => void;
    value: function renderLayers() {
      var subLayerProps = this.getSubLayerProps({
        id: 'geojson',
        // Proxy most GeoJsonLayer props as-is
        data: this.props.data,
        fp64: this.props.fp64,
        filled: this.props.filled,
        stroked: this.props.stroked,
        lineWidthScale: this.props.lineWidthScale,
        lineWidthMinPixels: this.props.lineWidthMinPixels,
        lineWidthMaxPixels: this.props.lineWidthMaxPixels,
        lineJointRounded: this.props.lineJointRounded,
        lineMiterLimit: this.props.lineMiterLimit,
        pointRadiusScale: this.props.pointRadiusScale,
        pointRadiusMinPixels: this.props.pointRadiusMinPixels,
        pointRadiusMaxPixels: this.props.pointRadiusMaxPixels,
        lineDashJustified: this.props.lineDashJustified,
        getLineColor: this.selectionAwareAccessor(this.props.getLineColor),
        getFillColor: this.selectionAwareAccessor(this.props.getFillColor),
        getRadius: this.selectionAwareAccessor(this.props.getRadius),
        getLineWidth: this.selectionAwareAccessor(this.props.getLineWidth),
        getLineDashArray: this.selectionAwareAccessor(this.props.getLineDashArray),
        updateTriggers: {
          getLineColor: [this.props.selectedFeatureIndexes, this.props.mode],
          getFillColor: [this.props.selectedFeatureIndexes, this.props.mode],
          getRadius: [this.props.selectedFeatureIndexes, this.props.mode],
          getLineWidth: [this.props.selectedFeatureIndexes, this.props.mode],
          getLineDashArray: [this.props.selectedFeatureIndexes, this.props.mode]
        }
      });
      var layers = [new _layers.GeoJsonLayer(subLayerProps)];
      layers = layers.concat(this.createTentativeLayers());
      layers = layers.concat(this.createEditHandleLayers());
      return layers;
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      _get(_getPrototypeOf(EditableGeoJsonLayer.prototype), "initializeState", this).call(this);

      this.setState({
        selectedFeatures: [],
        editHandles: []
      });
    } // TODO: figure out how to properly update state from an outside event handler

  }, {
    key: "shouldUpdateState",
    value: function shouldUpdateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          context = _ref.context,
          oldContext = _ref.oldContext,
          changeFlags = _ref.changeFlags;

      if (changeFlags.stateChanged) {
        return true;
      }

      return true;
    }
  }, {
    key: "updateState",
    value: function updateState(_ref2) {
      var props = _ref2.props,
          oldProps = _ref2.oldProps,
          changeFlags = _ref2.changeFlags;

      _get(_getPrototypeOf(EditableGeoJsonLayer.prototype), "updateState", this).call(this, {
        props: props,
        changeFlags: changeFlags
      });

      var modeHandler = this.state.modeHandler;

      if (changeFlags.propsOrDataChanged) {
        if (props.modeHandlers !== oldProps.modeHandlers || props.mode !== oldProps.mode) {
          modeHandler = props.modeHandlers[props.mode];

          if (!modeHandler) {
            console.warn("No handler configured for mode ".concat(props.mode)); // eslint-disable-line no-console,no-undef
            // Use default mode handler

            modeHandler = new _modeHandler.ModeHandler();
          }

          if (modeHandler !== this.state.modeHandler) {
            this.setState({
              modeHandler: modeHandler
            });
          }

          modeHandler.setFeatureCollection(props.data);
        } else if (changeFlags.dataChanged) {
          modeHandler.setFeatureCollection(props.data);
        }

        modeHandler.setModeConfig(props.modeConfig);
        modeHandler.setSelectedFeatureIndexes(props.selectedFeatureIndexes);
        modeHandler.setDeckGlContext(this.context);
        modeHandler.setLayerId(props.id);
        this.updateTentativeFeature();
        this.updateEditHandles();
      }

      var selectedFeatures = [];

      if (Array.isArray(props.selectedFeatureIndexes)) {
        // TODO: needs improved testing, i.e. checking for duplicates, NaNs, out of range numbers, ...
        selectedFeatures = props.selectedFeatureIndexes.map(function (elem) {
          return props.data.features[elem];
        });
      }

      this.setState({
        selectedFeatures: selectedFeatures
      });
    }
  }, {
    key: "selectionAwareAccessor",
    value: function selectionAwareAccessor(accessor) {
      var _this = this;

      if (typeof accessor !== 'function') {
        return accessor;
      }

      return function (feature) {
        return accessor(feature, _this.isFeatureSelected(feature), _this.props.mode);
      };
    }
  }, {
    key: "isFeatureSelected",
    value: function isFeatureSelected(feature) {
      if (!this.props.data || !this.props.selectedFeatureIndexes) {
        return false;
      }

      if (!this.props.selectedFeatureIndexes.length) {
        return false;
      }

      var featureIndex = this.props.data.features.indexOf(feature);
      return this.props.selectedFeatureIndexes.includes(featureIndex);
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref3) {
      var info = _ref3.info,
          sourceLayer = _ref3.sourceLayer;

      if (sourceLayer.id.endsWith('-edit-handles')) {
        // If user is picking an editing handle, add additional data to the info
        info.isEditingHandle = true;
      }

      return info;
    }
  }, {
    key: "createEditHandleLayers",
    value: function createEditHandleLayers() {
      if (!this.state.editHandles.length) {
        return [];
      }

      var sharedProps = _objectSpread({
        id: "".concat(this.props.editHandleType.layerName || this.props.editHandleType, "-edit-handles"),
        data: this.state.editHandles,
        fp64: this.props.fp64,
        parameters: this.props.editHandleParameters
      }, this.props.editHandleLayerProps);

      var layer;

      switch (this.props.editHandleType) {
        case 'icon':
          layer = new _layers.IconLayer(this.getSubLayerProps(_objectSpread({}, sharedProps, {
            iconAtlas: this.props.editHandleIconAtlas,
            iconMapping: this.props.editHandleIconMapping,
            sizeScale: this.props.editHandleIconSizeScale,
            getIcon: this.props.getEditHandleIcon,
            getSize: this.props.getEditHandleIconSize,
            getColor: this.props.getEditHandleIconColor,
            getAngle: this.props.getEditHandleIconAngle,
            getPosition: function getPosition(d) {
              return d.position;
            }
          })));
          break;

        case 'point':
          layer = new _layers.ScatterplotLayer(this.getSubLayerProps(_objectSpread({}, sharedProps, {
            // Proxy editing point props
            radiusScale: this.props.editHandlePointRadiusScale,
            outline: this.props.editHandlePointOutline,
            strokeWidth: this.props.editHandlePointStrokeWidth,
            radiusMinPixels: this.props.editHandlePointRadiusMinPixels,
            radiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
            getRadius: this.props.getEditHandlePointRadius,
            getColor: this.props.getEditHandlePointColor
          })));
          break;

        default:
          if (typeof this.props.editHandleType === 'function') {
            var EditHandleType = this.props.editHandleType;
            layer = new EditHandleType(this.getSubLayerProps(_objectSpread({}, sharedProps, {
              // Proxy editing point props
              radiusScale: this.props.editHandlePointRadiusScale,
              outline: this.props.editHandlePointOutline,
              strokeWidth: this.props.editHandlePointStrokeWidth,
              radiusMinPixels: this.props.editHandlePointRadiusMinPixels,
              radiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
              getRadius: this.props.getEditHandlePointRadius,
              getColor: this.props.getEditHandlePointColor
            })));
          }

          break;
      }

      return [layer];
    }
  }, {
    key: "createTentativeLayers",
    value: function createTentativeLayers() {
      var _this2 = this;

      if (!this.state.tentativeFeature) {
        return [];
      }

      var layer = new _layers.GeoJsonLayer(this.getSubLayerProps({
        id: 'tentative',
        data: this.state.tentativeFeature,
        fp64: this.props.fp64,
        pickable: false,
        stroked: true,
        autoHighlight: false,
        lineWidthScale: this.props.lineWidthScale,
        lineWidthMinPixels: this.props.lineWidthMinPixels,
        lineWidthMaxPixels: this.props.lineWidthMaxPixels,
        lineJointRounded: this.props.lineJointRounded,
        lineMiterLimit: this.props.lineMiterLimit,
        pointRadiusScale: this.props.editHandlePointRadiusScale,
        outline: this.props.editHandlePointOutline,
        strokeWidth: this.props.editHandlePointStrokeWidth,
        pointRadiusMinPixels: this.props.editHandlePointRadiusMinPixels,
        pointRadiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
        getRadius: this.props.getEditHandlePointRadius,
        getLineColor: function getLineColor(feature) {
          return _this2.props.getTentativeLineColor(feature, _this2.props.mode);
        },
        getLineWidth: function getLineWidth(feature) {
          return _this2.props.getTentativeLineWidth(feature, _this2.props.mode);
        },
        getFillColor: function getFillColor(feature) {
          return _this2.props.getTentativeFillColor(feature, _this2.props.mode);
        },
        getLineDashArray: function getLineDashArray(feature) {
          return _this2.props.getTentativeLineDashArray(feature, _this2.state.selectedFeatures[0], _this2.props.mode);
        }
      }));
      return [layer];
    }
  }, {
    key: "updateTentativeFeature",
    value: function updateTentativeFeature() {
      var tentativeFeature = this.state.modeHandler.getTentativeFeature();

      if (tentativeFeature !== this.state.tentativeFeature) {
        this.setState({
          tentativeFeature: tentativeFeature
        });
        this.setLayerNeedsUpdate();
      }
    }
  }, {
    key: "updateEditHandles",
    value: function updateEditHandles(picks, groundCoords) {
      var editHandles = this.state.modeHandler.getEditHandles(picks, groundCoords);

      if (editHandles !== this.state.editHandles) {
        this.setState({
          editHandles: editHandles
        });
        this.setLayerNeedsUpdate();
      }
    }
  }, {
    key: "onLayerClick",
    value: function onLayerClick(event) {
      var editAction = this.state.modeHandler.handleClick(event);
      this.updateTentativeFeature();
      this.updateEditHandles();

      if (editAction) {
        this.props.onEdit(editAction);
      }
    }
  }, {
    key: "onStartDragging",
    value: function onStartDragging(event) {
      var editAction = this.state.modeHandler.handleStartDragging(event);
      this.updateTentativeFeature();
      this.updateEditHandles();

      if (editAction) {
        this.props.onEdit(editAction);
      }
    }
  }, {
    key: "onStopDragging",
    value: function onStopDragging(event) {
      var editAction = this.state.modeHandler.handleStopDragging(event);
      this.updateTentativeFeature();
      this.updateEditHandles();

      if (editAction) {
        this.props.onEdit(editAction);
      }
    }
  }, {
    key: "onPointerMove",
    value: function onPointerMove(event) {
      var groundCoords = event.groundCoords,
          picks = event.picks,
          sourceEvent = event.sourceEvent;

      var _this$state$modeHandl = this.state.modeHandler.handlePointerMove(event),
          editAction = _this$state$modeHandl.editAction,
          cancelMapPan = _this$state$modeHandl.cancelMapPan;

      this.updateTentativeFeature();
      this.updateEditHandles(picks, groundCoords);

      if (cancelMapPan) {
        // TODO: find a less hacky way to prevent map panning
        // Stop propagation to prevent map panning while dragging an edit handle
        sourceEvent.stopPropagation();
      }

      if (editAction) {
        this.props.onEdit(editAction);
      }
    }
  }, {
    key: "getCursor",
    value: function getCursor(_ref4) {
      var isDragging = _ref4.isDragging;
      return this.state.modeHandler.getCursor({
        isDragging: isDragging
      });
    }
  }]);

  return EditableGeoJsonLayer;
}(_editableLayer.default);

exports.default = EditableGeoJsonLayer;
EditableGeoJsonLayer.layerName = 'EditableGeoJsonLayer';
EditableGeoJsonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,