"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImmutableFeatureCollection = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ImmutableFeatureCollection =
/*#__PURE__*/
function () {
  function ImmutableFeatureCollection(featureCollection) {
    _classCallCheck(this, ImmutableFeatureCollection);

    _defineProperty(this, "featureCollection", void 0);

    this.featureCollection = featureCollection;
  }

  _createClass(ImmutableFeatureCollection, [{
    key: "getObject",
    value: function getObject() {
      return this.featureCollection;
    }
    /**
     * Replaces the position deeply nested withing the given feature's geometry.
     * Works with Point, MultiPoint, LineString, MultiLineString, Polygon, and MultiPolygon.
     *
     * @param featureIndex The index of the feature to update
     * @param positionIndexes An array containing the indexes of the position to replace
     * @param updatedPosition The updated position to place in the result (i.e. [lng, lat])
     *
     * @returns A new `ImmutableFeatureCollection` with the given position replaced. Does not modify this `ImmutableFeatureCollection`.
     */

  }, {
    key: "replacePosition",
    value: function replacePosition(featureIndex, positionIndexes, updatedPosition) {
      var geometry = this.featureCollection.features[featureIndex].geometry;
      var isPolygonal = geometry.type === 'Polygon' || geometry.type === 'MultiPolygon';

      var updatedGeometry = _objectSpread({}, geometry, {
        coordinates: immutablyReplacePosition(geometry.coordinates, positionIndexes, updatedPosition, isPolygonal)
      });

      return this.replaceGeometry(featureIndex, updatedGeometry);
    }
    /**
     * Removes a position deeply nested in a GeoJSON geometry coordinates array.
     * Works with MultiPoint, LineString, MultiLineString, Polygon, and MultiPolygon.
     *
     * @param featureIndex The index of the feature to update
     * @param positionIndexes An array containing the indexes of the postion to remove
     *
     * @returns A new `ImmutableFeatureCollection` with the given coordinate removed. Does not modify this `ImmutableFeatureCollection`.
     */

  }, {
    key: "removePosition",
    value: function removePosition(featureIndex, positionIndexes) {
      var geometry = this.featureCollection.features[featureIndex].geometry;

      if (geometry.type === 'Point') {
        throw Error("Can't remove a position from a Point or there'd be nothing left");
      }

      if (geometry.type === 'MultiPoint' && // only 1 point left
      geometry.coordinates.length < 2) {
        throw Error("Can't remove the last point of a MultiPoint or there'd be nothing left");
      }

      if (geometry.type === 'LineString' && // only 2 positions
      geometry.coordinates.length < 3) {
        throw Error("Can't remove position. LineString must have at least two positions");
      }

      if (geometry.type === 'Polygon' && // outer ring is a triangle
      geometry.coordinates[0].length < 5 && // trying to remove from outer ring
      positionIndexes[0] === 0) {
        throw Error("Can't remove position. Polygon's outer ring must have at least four positions");
      }

      if (geometry.type === 'MultiLineString' && // only 1 LineString left
      geometry.coordinates.length === 1 && // only 2 positions
      geometry.coordinates[0].length < 3) {
        throw Error("Can't remove position. MultiLineString must have at least two positions");
      }

      if (geometry.type === 'MultiPolygon' && // only 1 polygon left
      geometry.coordinates.length === 1 && // outer ring is a triangle
      geometry.coordinates[0][0].length < 5 && // trying to remove from first polygon
      positionIndexes[0] === 0 && // trying to remove from outer ring
      positionIndexes[1] === 0) {
        throw Error("Can't remove position. MultiPolygon's outer ring must have at least four positions");
      }

      var isPolygonal = geometry.type === 'Polygon' || geometry.type === 'MultiPolygon';

      var updatedGeometry = _objectSpread({}, geometry, {
        coordinates: immutablyRemovePosition(geometry.coordinates, positionIndexes, isPolygonal)
      }); // Handle cases where incomplete geometries need pruned (e.g. holes that were triangles)


      pruneGeometryIfNecessary(updatedGeometry);
      return this.replaceGeometry(featureIndex, updatedGeometry);
    }
    /**
     * Adds a position deeply nested in a GeoJSON geometry coordinates array.
     * Works with MultiPoint, LineString, MultiLineString, Polygon, and MultiPolygon.
     *
     * @param featureIndex The index of the feature to update
     * @param positionIndexes An array containing the indexes of the postion that will preceed the new position
     * @param positionToAdd The new position to place in the result (i.e. [lng, lat])
     *
     * @returns A new `ImmutableFeatureCollection` with the given coordinate removed. Does not modify this `ImmutableFeatureCollection`.
     */

  }, {
    key: "addPosition",
    value: function addPosition(featureIndex, positionIndexes, positionToAdd) {
      var geometry = this.featureCollection.features[featureIndex].geometry;

      if (geometry.type === 'Point') {
        throw new Error('Unable to add a position to a Point feature');
      }

      var isPolygonal = geometry.type === 'Polygon' || geometry.type === 'MultiPolygon';

      var updatedGeometry = _objectSpread({}, geometry, {
        coordinates: immutablyAddPosition(geometry.coordinates, positionIndexes, positionToAdd, isPolygonal)
      });

      return this.replaceGeometry(featureIndex, updatedGeometry);
    }
  }, {
    key: "replaceGeometry",
    value: function replaceGeometry(featureIndex, geometry) {
      var updatedFeature = _objectSpread({}, this.featureCollection.features[featureIndex], {
        geometry: geometry
      });

      var updatedFeatureCollection = _objectSpread({}, this.featureCollection, {
        features: _toConsumableArray(this.featureCollection.features.slice(0, featureIndex)).concat([updatedFeature], _toConsumableArray(this.featureCollection.features.slice(featureIndex + 1)))
      });

      return new ImmutableFeatureCollection(updatedFeatureCollection);
    }
  }, {
    key: "addFeature",
    value: function addFeature(feature) {
      var updatedFeatureCollection = _objectSpread({}, this.featureCollection, {
        features: _toConsumableArray(this.featureCollection.features).concat([feature])
      });

      return new ImmutableFeatureCollection(updatedFeatureCollection);
    }
  }]);

  return ImmutableFeatureCollection;
}();

exports.ImmutableFeatureCollection = ImmutableFeatureCollection;

function getUpdatedPosition(updatedPosition, previousPosition) {
  // This function checks if the updatedPosition is missing elevation
  // and copies it from previousPosition
  if (updatedPosition.length === 2 && previousPosition.length === 3) {
    var elevation = previousPosition[2];
    return [updatedPosition[0], updatedPosition[1], elevation];
  }

  return updatedPosition;
}

function immutablyReplacePosition(coordinates, positionIndexes, updatedPosition, isPolygonal) {
  if (!positionIndexes) {
    return coordinates;
  }

  if (positionIndexes.length === 0) {
    return getUpdatedPosition(updatedPosition, coordinates);
  }

  if (positionIndexes.length === 1) {
    var updated = _toConsumableArray(coordinates.slice(0, positionIndexes[0])).concat([getUpdatedPosition(updatedPosition, coordinates[positionIndexes[0]])], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));

    if (isPolygonal && (positionIndexes[0] === 0 || positionIndexes[0] === coordinates.length - 1)) {
      // for polygons, the first point is repeated at the end of the array
      // so, update it on both ends of the array
      updated[0] = getUpdatedPosition(updatedPosition, coordinates[0]);
      updated[coordinates.length - 1] = getUpdatedPosition(updatedPosition, coordinates[0]);
    }

    return updated;
  } // recursively update inner array


  return _toConsumableArray(coordinates.slice(0, positionIndexes[0])).concat([immutablyReplacePosition(coordinates[positionIndexes[0]], positionIndexes.slice(1, positionIndexes.length), updatedPosition, isPolygonal)], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));
}

function immutablyRemovePosition(coordinates, positionIndexes, isPolygonal) {
  if (!positionIndexes) {
    return coordinates;
  }

  if (positionIndexes.length === 0) {
    throw Error('Must specify the index of the position to remove');
  }

  if (positionIndexes.length === 1) {
    var updated = _toConsumableArray(coordinates.slice(0, positionIndexes[0])).concat(_toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));

    if (isPolygonal && (positionIndexes[0] === 0 || positionIndexes[0] === coordinates.length - 1)) {
      // for polygons, the first point is repeated at the end of the array
      // so, if the first/last coordinate is to be removed, coordinates[1] will be the new first/last coordinate
      if (positionIndexes[0] === 0) {
        // change the last to be the same as the first
        updated[updated.length - 1] = updated[0];
      } else if (positionIndexes[0] === coordinates.length - 1) {
        // change the first to be the same as the last
        updated[0] = updated[updated.length - 1];
      }
    }

    return updated;
  } // recursively update inner array


  return _toConsumableArray(coordinates.slice(0, positionIndexes[0])).concat([immutablyRemovePosition(coordinates[positionIndexes[0]], positionIndexes.slice(1, positionIndexes.length), isPolygonal)], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));
}

function immutablyAddPosition(coordinates, positionIndexes, positionToAdd, isPolygonal) {
  if (!positionIndexes) {
    return coordinates;
  }

  if (positionIndexes.length === 0) {
    throw Error('Must specify the index of the position to remove');
  }

  if (positionIndexes.length === 1) {
    var updated = _toConsumableArray(coordinates.slice(0, positionIndexes[0])).concat([positionToAdd], _toConsumableArray(coordinates.slice(positionIndexes[0])));

    return updated;
  } // recursively update inner array


  return _toConsumableArray(coordinates.slice(0, positionIndexes[0])).concat([immutablyAddPosition(coordinates[positionIndexes[0]], positionIndexes.slice(1, positionIndexes.length), positionToAdd, isPolygonal)], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));
}

function pruneGeometryIfNecessary(geometry) {
  switch (geometry.type) {
    case 'Polygon':
      prunePolygonIfNecessary(geometry);
      break;

    case 'MultiLineString':
      pruneMultiLineStringIfNecessary(geometry);
      break;

    case 'MultiPolygon':
      pruneMultiPolygonIfNecessary(geometry);
      break;

    default:
      // Not downgradable
      break;
  }
}

function prunePolygonIfNecessary(geometry) {
  var polygon = geometry.coordinates; // If any hole is no longer a polygon, remove the hole entirely

  for (var holeIndex = 1; holeIndex < polygon.length; holeIndex++) {
    if (removeHoleIfNecessary(polygon, holeIndex)) {
      // It was removed, so keep the index the same
      holeIndex--;
    }
  }
}

function pruneMultiLineStringIfNecessary(geometry) {
  for (var lineStringIndex = 0; lineStringIndex < geometry.coordinates.length; lineStringIndex++) {
    var lineString = geometry.coordinates[lineStringIndex];

    if (lineString.length === 1) {
      // Only a single position left on this LineString, so remove it (can't have Point in MultiLineString)
      geometry.coordinates.splice(lineStringIndex, 1); // Keep the index the same

      lineStringIndex--;
    }
  }
}

function pruneMultiPolygonIfNecessary(geometry) {
  for (var polygonIndex = 0; polygonIndex < geometry.coordinates.length; polygonIndex++) {
    var polygon = geometry.coordinates[polygonIndex];
    var outerRing = polygon[0]; // If the outer ring is no longer a polygon, remove the whole polygon

    if (outerRing.length <= 3) {
      geometry.coordinates.splice(polygonIndex, 1); // It was removed, so keep the index the same

      polygonIndex--;
    }

    for (var holeIndex = 1; holeIndex < polygon.length; holeIndex++) {
      if (removeHoleIfNecessary(polygon, holeIndex)) {
        // It was removed, so keep the index the same
        holeIndex--;
      }
    }
  }
}

function removeHoleIfNecessary(polygon, holeIndex) {
  var hole = polygon[holeIndex];

  if (hole.length <= 3) {
    polygon.splice(holeIndex, 1);
    return true;
  }

  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,